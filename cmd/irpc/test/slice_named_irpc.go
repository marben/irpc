// Code generated by irpc generator; DO NOT EDIT
package irpctestpkg

import (
	"context"
	"fmt"
	"github.com/marben/irpc/cmd/irpc/test/out"
	"github.com/marben/irpc/irpcgen"
)

type sliceNamedApiIRpcService struct {
	impl sliceNamedApi
	id   []byte
}

func newSliceNamedApiIRpcService(impl sliceNamedApi) *sliceNamedApiIRpcService {
	return &sliceNamedApiIRpcService{
		impl: impl,
		id: []byte{
			0xfd, 0x5c, 0x19, 0x80, 0xbf, 0xae, 0xed, 0x24,
			0x23, 0x43, 0xa4, 0x5e, 0x18, 0x44, 0x9c, 0x64,
			0xba, 0x3a, 0x40, 0x8c, 0x6b, 0x65, 0x18, 0x9c,
			0x70, 0xb8, 0x6e, 0x84, 0xb5, 0xe4, 0x7a, 0xb2,
		},
	}
}
func (s *sliceNamedApiIRpcService) Id() []byte {
	return s.id
}
func (s *sliceNamedApiIRpcService) GetFuncCall(funcId irpcgen.FuncId) (irpcgen.ArgDeserializer, error) {
	switch funcId {
	case 0: // sumNamedInts
		return func(d *irpcgen.Decoder) (irpcgen.FuncExecutor, error) {
			// DESERIALIZE
			var args _Irpc_sliceNamedApisumNamedIntsReq
			if err := args.Deserialize(d); err != nil {
				return nil, err
			}
			return func(ctx context.Context) irpcgen.Serializable {
				// EXECUTE
				var resp _Irpc_sliceNamedApisumNamedIntsResp
				resp.Param0 = s.impl.sumNamedInts(args.Param0_vec)
				return resp
			}, nil
		}, nil
	case 1: // sumOutsideNamedInts
		return func(d *irpcgen.Decoder) (irpcgen.FuncExecutor, error) {
			// DESERIALIZE
			var args _Irpc_sliceNamedApisumOutsideNamedIntsReq
			if err := args.Deserialize(d); err != nil {
				return nil, err
			}
			return func(ctx context.Context) irpcgen.Serializable {
				// EXECUTE
				var resp _Irpc_sliceNamedApisumOutsideNamedIntsResp
				resp.Param0 = s.impl.sumOutsideNamedInts(args.Param0_vec)
				return resp
			}, nil
		}, nil
	case 2: // sumSliceOfNamedInts
		return func(d *irpcgen.Decoder) (irpcgen.FuncExecutor, error) {
			// DESERIALIZE
			var args _Irpc_sliceNamedApisumSliceOfNamedIntsReq
			if err := args.Deserialize(d); err != nil {
				return nil, err
			}
			return func(ctx context.Context) irpcgen.Serializable {
				// EXECUTE
				var resp _Irpc_sliceNamedApisumSliceOfNamedIntsResp
				resp.Param0 = s.impl.sumSliceOfNamedInts(args.Param0_vec)
				return resp
			}, nil
		}, nil
	default:
		return nil, fmt.Errorf("function '%d' doesn't exist on service '%s'", funcId, s.Id())
	}
}

type sliceNamedApiIRpcClient struct {
	endpoint irpcgen.Endpoint
	id       []byte
}

func newSliceNamedApiIRpcClient(endpoint irpcgen.Endpoint) (*sliceNamedApiIRpcClient, error) {
	id := []byte{
		0xfd, 0x5c, 0x19, 0x80, 0xbf, 0xae, 0xed, 0x24,
		0x23, 0x43, 0xa4, 0x5e, 0x18, 0x44, 0x9c, 0x64,
		0xba, 0x3a, 0x40, 0x8c, 0x6b, 0x65, 0x18, 0x9c,
		0x70, 0xb8, 0x6e, 0x84, 0xb5, 0xe4, 0x7a, 0xb2,
	}
	if err := endpoint.RegisterClient(id); err != nil {
		return nil, fmt.Errorf("register failed: %w", err)
	}
	return &sliceNamedApiIRpcClient{endpoint: endpoint, id: id}, nil
}
func (_c *sliceNamedApiIRpcClient) sumNamedInts(vec namedSliceOfInts) int {
	var req = _Irpc_sliceNamedApisumNamedIntsReq{
		Param0_vec: vec,
	}
	var resp _Irpc_sliceNamedApisumNamedIntsResp
	if err := _c.endpoint.CallRemoteFunc(context.Background(), _c.id, 0, req, &resp); err != nil {
		panic(err) // to avoid panic, make your func return error and regenerate irpc code
	}
	return resp.Param0
}
func (_c *sliceNamedApiIRpcClient) sumOutsideNamedInts(vec out.AliasedByteSlice) int {
	var req = _Irpc_sliceNamedApisumOutsideNamedIntsReq{
		Param0_vec: vec,
	}
	var resp _Irpc_sliceNamedApisumOutsideNamedIntsResp
	if err := _c.endpoint.CallRemoteFunc(context.Background(), _c.id, 1, req, &resp); err != nil {
		panic(err) // to avoid panic, make your func return error and regenerate irpc code
	}
	return resp.Param0
}
func (_c *sliceNamedApiIRpcClient) sumSliceOfNamedInts(vec []out.Uint8) out.Uint8 {
	var req = _Irpc_sliceNamedApisumSliceOfNamedIntsReq{
		Param0_vec: vec,
	}
	var resp _Irpc_sliceNamedApisumSliceOfNamedIntsResp
	if err := _c.endpoint.CallRemoteFunc(context.Background(), _c.id, 2, req, &resp); err != nil {
		panic(err) // to avoid panic, make your func return error and regenerate irpc code
	}
	return resp.Param0
}

type _Irpc_sliceNamedApisumNamedIntsReq struct {
	Param0_vec namedSliceOfInts
}

func (s _Irpc_sliceNamedApisumNamedIntsReq) Serialize(e *irpcgen.Encoder) error {
	{ // s.Param0_vec namedSliceOfInts
		var l int = len(s.Param0_vec)
		if err := e.UvarInt64(uint64(l)); err != nil {
			return fmt.Errorf("serialize uint64(l) of type \"uint64\": %w", err)
		}
		for _, v := range s.Param0_vec {
			if err := e.VarInt(v); err != nil {
				return fmt.Errorf("serialize v of type \"int\": %w", err)
			}
		}
	}
	return nil
}
func (s *_Irpc_sliceNamedApisumNamedIntsReq) Deserialize(d *irpcgen.Decoder) error {
	{ // s.Param0_vec namedSliceOfInts
		var ul uint64
		if err := d.UvarInt64(&ul); err != nil {
			return fmt.Errorf("deserialize ul of type \"uint64\": %w", err)
		}
		var l int = int(ul)
		s.Param0_vec = make(namedSliceOfInts, l)
		for i := range l {
			if err := d.VarInt(&s.Param0_vec[i]); err != nil {
				return fmt.Errorf("deserialize s.Param0_vec[i] of type \"int\": %w", err)
			}
		}
	}
	return nil
}

type _Irpc_sliceNamedApisumNamedIntsResp struct {
	Param0 int
}

func (s _Irpc_sliceNamedApisumNamedIntsResp) Serialize(e *irpcgen.Encoder) error {
	if err := e.VarInt(s.Param0); err != nil {
		return fmt.Errorf("serialize s.Param0 of type \"int\": %w", err)
	}
	return nil
}
func (s *_Irpc_sliceNamedApisumNamedIntsResp) Deserialize(d *irpcgen.Decoder) error {
	if err := d.VarInt(&s.Param0); err != nil {
		return fmt.Errorf("deserialize s.Param0 of type \"int\": %w", err)
	}
	return nil
}

type _Irpc_sliceNamedApisumOutsideNamedIntsReq struct {
	Param0_vec out.AliasedByteSlice
}

func (s _Irpc_sliceNamedApisumOutsideNamedIntsReq) Serialize(e *irpcgen.Encoder) error {
	{ // s.Param0_vec out.AliasedByteSlice
		var l int = len(s.Param0_vec)
		if err := e.UvarInt64(uint64(l)); err != nil {
			return fmt.Errorf("serialize uint64(l) of type \"uint64\": %w", err)
		}
		for _, v := range s.Param0_vec {
			if err := e.Uint8(uint8(v)); err != nil {
				return fmt.Errorf("serialize v of type \"uint8\": %w", err)
			}
		}
	}
	return nil
}
func (s *_Irpc_sliceNamedApisumOutsideNamedIntsReq) Deserialize(d *irpcgen.Decoder) error {
	{ // s.Param0_vec out.AliasedByteSlice
		var ul uint64
		if err := d.UvarInt64(&ul); err != nil {
			return fmt.Errorf("deserialize ul of type \"uint64\": %w", err)
		}
		var l int = int(ul)
		s.Param0_vec = make(out.AliasedByteSlice, l)
		for i := range l {
			if err := d.Uint8((*uint8)(&s.Param0_vec[i])); err != nil {
				return fmt.Errorf("deserialize s.Param0_vec[i] of type \"uint8\": %w", err)
			}
		}
	}
	return nil
}

type _Irpc_sliceNamedApisumOutsideNamedIntsResp struct {
	Param0 int
}

func (s _Irpc_sliceNamedApisumOutsideNamedIntsResp) Serialize(e *irpcgen.Encoder) error {
	if err := e.VarInt(s.Param0); err != nil {
		return fmt.Errorf("serialize s.Param0 of type \"int\": %w", err)
	}
	return nil
}
func (s *_Irpc_sliceNamedApisumOutsideNamedIntsResp) Deserialize(d *irpcgen.Decoder) error {
	if err := d.VarInt(&s.Param0); err != nil {
		return fmt.Errorf("deserialize s.Param0 of type \"int\": %w", err)
	}
	return nil
}

type _Irpc_sliceNamedApisumSliceOfNamedIntsReq struct {
	Param0_vec []out.Uint8
}

func (s _Irpc_sliceNamedApisumSliceOfNamedIntsReq) Serialize(e *irpcgen.Encoder) error {
	{ // s.Param0_vec []out.Uint8
		var l int = len(s.Param0_vec)
		if err := e.UvarInt64(uint64(l)); err != nil {
			return fmt.Errorf("serialize uint64(l) of type \"uint64\": %w", err)
		}
		for _, v := range s.Param0_vec {
			if err := e.Uint8(uint8(v)); err != nil {
				return fmt.Errorf("serialize v of type \"uint8\": %w", err)
			}
		}
	}
	return nil
}
func (s *_Irpc_sliceNamedApisumSliceOfNamedIntsReq) Deserialize(d *irpcgen.Decoder) error {
	{ // s.Param0_vec []out.Uint8
		var ul uint64
		if err := d.UvarInt64(&ul); err != nil {
			return fmt.Errorf("deserialize ul of type \"uint64\": %w", err)
		}
		var l int = int(ul)
		s.Param0_vec = make([]out.Uint8, l)
		for i := range l {
			if err := d.Uint8((*uint8)(&s.Param0_vec[i])); err != nil {
				return fmt.Errorf("deserialize s.Param0_vec[i] of type \"uint8\": %w", err)
			}
		}
	}
	return nil
}

type _Irpc_sliceNamedApisumSliceOfNamedIntsResp struct {
	Param0 out.Uint8
}

func (s _Irpc_sliceNamedApisumSliceOfNamedIntsResp) Serialize(e *irpcgen.Encoder) error {
	if err := e.Uint8(uint8(s.Param0)); err != nil {
		return fmt.Errorf("serialize s.Param0 of type \"uint8\": %w", err)
	}
	return nil
}
func (s *_Irpc_sliceNamedApisumSliceOfNamedIntsResp) Deserialize(d *irpcgen.Decoder) error {
	if err := d.Uint8((*uint8)(&s.Param0)); err != nil {
		return fmt.Errorf("deserialize s.Param0 of type \"uint8\": %w", err)
	}
	return nil
}
