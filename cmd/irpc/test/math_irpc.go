// Code generated by irpc generator; DO NOT EDIT
package irpctestpkg

import (
	"context"
	"fmt"
	"github.com/marben/irpc/irpcgen"
)

type MathIRpcService struct {
	impl Math
	id   []byte
}

func NewMathIRpcService(impl Math) *MathIRpcService {
	return &MathIRpcService{
		impl: impl,
		id:   []byte{170, 142, 130, 182, 132, 24, 44, 231, 14, 157, 131, 238, 151, 151, 181, 98, 137, 225, 216, 29, 142, 92, 223, 75, 60, 147, 69, 29, 186, 7, 67, 245},
	}
}
func (s *MathIRpcService) Id() []byte {
	return s.id
}
func (s *MathIRpcService) GetFuncCall(funcId irpcgen.FuncId) (irpcgen.ArgDeserializer, error) {
	switch funcId {
	case 0: // Add
		return func(d *irpcgen.Decoder) (irpcgen.FuncExecutor, error) {
			// DESERIALIZE
			var args _Irpc_MathAddReq
			if err := args.Deserialize(d); err != nil {
				return nil, err
			}
			return func(ctx context.Context) irpcgen.Serializable {
				// EXECUTE
				var resp _Irpc_MathAddResp
				resp.Param0, resp.Param1 = s.impl.Add(args.Param0_a, args.Param0_b)
				return resp
			}, nil
		}, nil
	default:
		return nil, fmt.Errorf("function '%d' doesn't exist on service '%s'", funcId, s.Id())
	}
}

type MathIRpcClient struct {
	endpoint irpcgen.Endpoint
	id       []byte
}

func NewMathIRpcClient(endpoint irpcgen.Endpoint) (*MathIRpcClient, error) {
	id := []byte{170, 142, 130, 182, 132, 24, 44, 231, 14, 157, 131, 238, 151, 151, 181, 98, 137, 225, 216, 29, 142, 92, 223, 75, 60, 147, 69, 29, 186, 7, 67, 245}
	if err := endpoint.RegisterClient(id); err != nil {
		return nil, fmt.Errorf("register failed: %w", err)
	}
	return &MathIRpcClient{endpoint: endpoint, id: id}, nil
}
func (_c *MathIRpcClient) Add(a int, b int) (int, error) {
	var req = _Irpc_MathAddReq{
		Param0_a: a,
		Param0_b: b,
	}
	var resp _Irpc_MathAddResp
	if err := _c.endpoint.CallRemoteFunc(context.Background(), _c.id, 0, req, &resp); err != nil {
		var zero _Irpc_MathAddResp
		return zero.Param0, err
	}
	return resp.Param0, resp.Param1
}

type _Irpc_MathAddReq struct {
	Param0_a int
	Param0_b int
}

func (s _Irpc_MathAddReq) Serialize(e *irpcgen.Encoder) error {
	if err := e.VarInt(s.Param0_a); err != nil {
		return fmt.Errorf("serialize s.Param0_a of type 'int': %w", err)
	}
	if err := e.VarInt(s.Param0_b); err != nil {
		return fmt.Errorf("serialize s.Param0_b of type 'int': %w", err)
	}
	return nil
}
func (s *_Irpc_MathAddReq) Deserialize(d *irpcgen.Decoder) error {
	if err := d.VarInt(&s.Param0_a); err != nil {
		return fmt.Errorf("deserialize s.Param0_a of type 'int': %w", err)
	}
	if err := d.VarInt(&s.Param0_b); err != nil {
		return fmt.Errorf("deserialize s.Param0_b of type 'int': %w", err)
	}
	return nil
}

type _Irpc_MathAddResp struct {
	Param0 int
	Param1 error
}

func (s _Irpc_MathAddResp) Serialize(e *irpcgen.Encoder) error {
	if err := e.VarInt(s.Param0); err != nil {
		return fmt.Errorf("serialize s.Param0 of type 'int': %w", err)
	}
	{
		var isNil bool
		if s.Param1 == nil {
			isNil = true
		}
		if err := e.Bool(isNil); err != nil {
			return fmt.Errorf("serialize isNil of type 'bool': %w", err)
		}

		if !isNil {
			{ // Error()
				_Error_0_ := s.Param1.Error()
				if err := e.String(_Error_0_); err != nil {
					return fmt.Errorf("serialize _Error_0_ of type 'string': %w", err)
				}
			}
		}
	}
	return nil
}
func (s *_Irpc_MathAddResp) Deserialize(d *irpcgen.Decoder) error {
	if err := d.VarInt(&s.Param0); err != nil {
		return fmt.Errorf("deserialize s.Param0 of type 'int': %w", err)
	}
	{
		var isNil bool
		if err := d.Bool(&isNil); err != nil {
			return fmt.Errorf("deserialize isNil of type 'bool': %w", err)
		}

		if isNil {
			s.Param1 = nil
		} else {
			var impl _error_Math_impl
			{ // Error()
				if err := d.String(&impl._Error_0_); err != nil {
					return fmt.Errorf("deserialize impl._Error_0_ of type 'string': %w", err)
				}
			}
			s.Param1 = impl
		}
	}
	return nil
}

type _error_Math_impl struct {
	_Error_0_ string
}

func (i _error_Math_impl) Error() string {
	return i._Error_0_
}
