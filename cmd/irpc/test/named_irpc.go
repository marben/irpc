// Code generated by irpc generator; DO NOT EDIT
package irpctestpkg

import (
	"context"
	"fmt"
	"github.com/marben/irpc/irpcgen"
)

type namedTestIRpcService struct {
	impl namedTest
	id   []byte
}

func newNamedTestIRpcService(impl namedTest) *namedTestIRpcService {
	return &namedTestIRpcService{
		impl: impl,
		id:   []byte{135, 52, 111, 125, 125, 242, 115, 215, 55, 27, 223, 186, 245, 128, 81, 211, 226, 93, 238, 253, 204, 82, 251, 3, 194, 208, 236, 188, 209, 34, 77, 159},
	}
}
func (s *namedTestIRpcService) Id() []byte {
	return s.id
}
func (s *namedTestIRpcService) GetFuncCall(funcId irpcgen.FuncId) (irpcgen.ArgDeserializer, error) {
	switch funcId {
	case 0: // isWeekend
		return func(d *irpcgen.Decoder) (irpcgen.FuncExecutor, error) {
			// DESERIALIZE
			var args _Irpc_namedTestisWeekendReq
			if err := args.Deserialize(d); err != nil {
				return nil, err
			}
			return func(ctx context.Context) irpcgen.Serializable {
				// EXECUTE
				var resp _Irpc_namedTestisWeekendResp
				resp.Param0 = s.impl.isWeekend(args.Param0_wd)
				return resp
			}, nil
		}, nil
	case 1: // isWeekend2
		return func(d *irpcgen.Decoder) (irpcgen.FuncExecutor, error) {
			// DESERIALIZE
			var args _Irpc_namedTestisWeekend2Req
			if err := args.Deserialize(d); err != nil {
				return nil, err
			}
			return func(ctx context.Context) irpcgen.Serializable {
				// EXECUTE
				var resp _Irpc_namedTestisWeekend2Resp
				resp.Param0 = s.impl.isWeekend2(args.Param0_wd)
				return resp
			}, nil
		}, nil
	case 2: // containsSaturday
		return func(d *irpcgen.Decoder) (irpcgen.FuncExecutor, error) {
			// DESERIALIZE
			var args _Irpc_namedTestcontainsSaturdayReq
			if err := args.Deserialize(d); err != nil {
				return nil, err
			}
			return func(ctx context.Context) irpcgen.Serializable {
				// EXECUTE
				var resp _Irpc_namedTestcontainsSaturdayResp
				resp.Param0 = s.impl.containsSaturday(args.Param0_wds)
				return resp
			}, nil
		}, nil
	case 3: // containsSaturday2
		return func(d *irpcgen.Decoder) (irpcgen.FuncExecutor, error) {
			// DESERIALIZE
			var args _Irpc_namedTestcontainsSaturday2Req
			if err := args.Deserialize(d); err != nil {
				return nil, err
			}
			return func(ctx context.Context) irpcgen.Serializable {
				// EXECUTE
				var resp _Irpc_namedTestcontainsSaturday2Resp
				resp.Param0 = s.impl.containsSaturday2(args.Param0_wds)
				return resp
			}, nil
		}, nil
	case 4: // namedBytesSum
		return func(d *irpcgen.Decoder) (irpcgen.FuncExecutor, error) {
			// DESERIALIZE
			var args _Irpc_namedTestnamedBytesSumReq
			if err := args.Deserialize(d); err != nil {
				return nil, err
			}
			return func(ctx context.Context) irpcgen.Serializable {
				// EXECUTE
				var resp _Irpc_namedTestnamedBytesSumResp
				resp.Param0 = s.impl.namedBytesSum(args.Param0_nb)
				return resp
			}, nil
		}, nil
	default:
		return nil, fmt.Errorf("function '%d' doesn't exist on service '%s'", funcId, s.Id())
	}
}

type namedTestIRpcClient struct {
	endpoint irpcgen.Endpoint
	id       []byte
}

func newNamedTestIRpcClient(endpoint irpcgen.Endpoint) (*namedTestIRpcClient, error) {
	id := []byte{135, 52, 111, 125, 125, 242, 115, 215, 55, 27, 223, 186, 245, 128, 81, 211, 226, 93, 238, 253, 204, 82, 251, 3, 194, 208, 236, 188, 209, 34, 77, 159}
	if err := endpoint.RegisterClient(id); err != nil {
		return nil, fmt.Errorf("register failed: %w", err)
	}
	return &namedTestIRpcClient{endpoint: endpoint, id: id}, nil
}
func (_c *namedTestIRpcClient) isWeekend(wd weekDay) bool {
	var req = _Irpc_namedTestisWeekendReq{
		Param0_wd: wd,
	}
	var resp _Irpc_namedTestisWeekendResp
	if err := _c.endpoint.CallRemoteFunc(context.Background(), _c.id, 0, req, &resp); err != nil {
		panic(err) // to avoid panic, make your func return error and regenerate the code
	}
	return resp.Param0
}
func (_c *namedTestIRpcClient) isWeekend2(wd weekDay2) bool {
	var req = _Irpc_namedTestisWeekend2Req{
		Param0_wd: wd,
	}
	var resp _Irpc_namedTestisWeekend2Resp
	if err := _c.endpoint.CallRemoteFunc(context.Background(), _c.id, 1, req, &resp); err != nil {
		panic(err) // to avoid panic, make your func return error and regenerate the code
	}
	return resp.Param0
}
func (_c *namedTestIRpcClient) containsSaturday(wds []weekDay) bool {
	var req = _Irpc_namedTestcontainsSaturdayReq{
		Param0_wds: wds,
	}
	var resp _Irpc_namedTestcontainsSaturdayResp
	if err := _c.endpoint.CallRemoteFunc(context.Background(), _c.id, 2, req, &resp); err != nil {
		panic(err) // to avoid panic, make your func return error and regenerate the code
	}
	return resp.Param0
}
func (_c *namedTestIRpcClient) containsSaturday2(wds namedWeekDaysSliceType) bool {
	var req = _Irpc_namedTestcontainsSaturday2Req{
		Param0_wds: wds,
	}
	var resp _Irpc_namedTestcontainsSaturday2Resp
	if err := _c.endpoint.CallRemoteFunc(context.Background(), _c.id, 3, req, &resp); err != nil {
		panic(err) // to avoid panic, make your func return error and regenerate the code
	}
	return resp.Param0
}
func (_c *namedTestIRpcClient) namedBytesSum(nb namedByteSliceType) int {
	var req = _Irpc_namedTestnamedBytesSumReq{
		Param0_nb: nb,
	}
	var resp _Irpc_namedTestnamedBytesSumResp
	if err := _c.endpoint.CallRemoteFunc(context.Background(), _c.id, 4, req, &resp); err != nil {
		panic(err) // to avoid panic, make your func return error and regenerate the code
	}
	return resp.Param0
}

type _Irpc_namedTestisWeekendReq struct {
	Param0_wd weekDay
}

func (s _Irpc_namedTestisWeekendReq) Serialize(e *irpcgen.Encoder) error {
	if err := e.Uint8(uint8(s.Param0_wd)); err != nil {
		return fmt.Errorf("serialize s.Param0_wd of type 'uint8': %w", err)
	}
	return nil
}
func (s *_Irpc_namedTestisWeekendReq) Deserialize(d *irpcgen.Decoder) error {
	if err := d.Uint8((*uint8)(&s.Param0_wd)); err != nil {
		return fmt.Errorf("deserialize s.Param0_wd of type 'uint8': %w", err)
	}
	return nil
}

type _Irpc_namedTestisWeekendResp struct {
	Param0 bool
}

func (s _Irpc_namedTestisWeekendResp) Serialize(e *irpcgen.Encoder) error {
	if err := e.Bool(s.Param0); err != nil {
		return fmt.Errorf("serialize s.Param0 of type 'bool': %w", err)
	}
	return nil
}
func (s *_Irpc_namedTestisWeekendResp) Deserialize(d *irpcgen.Decoder) error {
	if err := d.Bool(&s.Param0); err != nil {
		return fmt.Errorf("deserialize s.Param0 of type 'bool': %w", err)
	}
	return nil
}

type _Irpc_namedTestisWeekend2Req struct {
	Param0_wd weekDay2
}

func (s _Irpc_namedTestisWeekend2Req) Serialize(e *irpcgen.Encoder) error {
	if err := e.Uint8(uint8(s.Param0_wd)); err != nil {
		return fmt.Errorf("serialize s.Param0_wd of type 'uint8': %w", err)
	}
	return nil
}
func (s *_Irpc_namedTestisWeekend2Req) Deserialize(d *irpcgen.Decoder) error {
	if err := d.Uint8((*uint8)(&s.Param0_wd)); err != nil {
		return fmt.Errorf("deserialize s.Param0_wd of type 'uint8': %w", err)
	}
	return nil
}

type _Irpc_namedTestisWeekend2Resp struct {
	Param0 bool
}

func (s _Irpc_namedTestisWeekend2Resp) Serialize(e *irpcgen.Encoder) error {
	if err := e.Bool(s.Param0); err != nil {
		return fmt.Errorf("serialize s.Param0 of type 'bool': %w", err)
	}
	return nil
}
func (s *_Irpc_namedTestisWeekend2Resp) Deserialize(d *irpcgen.Decoder) error {
	if err := d.Bool(&s.Param0); err != nil {
		return fmt.Errorf("deserialize s.Param0 of type 'bool': %w", err)
	}
	return nil
}

type _Irpc_namedTestcontainsSaturdayReq struct {
	Param0_wds []weekDay
}

func (s _Irpc_namedTestcontainsSaturdayReq) Serialize(e *irpcgen.Encoder) error {
	{ // s.Param0_wds []weekDay
		var l int = len(s.Param0_wds)
		if err := e.UvarInt64(uint64(l)); err != nil {
			return fmt.Errorf("serialize uint64(l) of type 'uint64': %w", err)
		}
		for _, v := range s.Param0_wds {
			if err := e.Uint8(uint8(v)); err != nil {
				return fmt.Errorf("serialize v of type 'uint8': %w", err)
			}
		}
	}
	return nil
}
func (s *_Irpc_namedTestcontainsSaturdayReq) Deserialize(d *irpcgen.Decoder) error {
	{ // s.Param0_wds []weekDay
		var ul uint64
		if err := d.UvarInt64(&ul); err != nil {
			return fmt.Errorf("deserialize ul of type 'uint64': %w", err)
		}
		var l int = int(ul)
		s.Param0_wds = make([]weekDay, l)
		for i := range l {
			if err := d.Uint8((*uint8)(&s.Param0_wds[i])); err != nil {
				return fmt.Errorf("deserialize s.Param0_wds[i] of type 'uint8': %w", err)
			}
		}
	}
	return nil
}

type _Irpc_namedTestcontainsSaturdayResp struct {
	Param0 bool
}

func (s _Irpc_namedTestcontainsSaturdayResp) Serialize(e *irpcgen.Encoder) error {
	if err := e.Bool(s.Param0); err != nil {
		return fmt.Errorf("serialize s.Param0 of type 'bool': %w", err)
	}
	return nil
}
func (s *_Irpc_namedTestcontainsSaturdayResp) Deserialize(d *irpcgen.Decoder) error {
	if err := d.Bool(&s.Param0); err != nil {
		return fmt.Errorf("deserialize s.Param0 of type 'bool': %w", err)
	}
	return nil
}

type _Irpc_namedTestcontainsSaturday2Req struct {
	Param0_wds namedWeekDaysSliceType
}

func (s _Irpc_namedTestcontainsSaturday2Req) Serialize(e *irpcgen.Encoder) error {
	{ // s.Param0_wds []weekDay
		var l int = len(s.Param0_wds)
		if err := e.UvarInt64(uint64(l)); err != nil {
			return fmt.Errorf("serialize uint64(l) of type 'uint64': %w", err)
		}
		for _, v := range s.Param0_wds {
			if err := e.Uint8(uint8(v)); err != nil {
				return fmt.Errorf("serialize v of type 'uint8': %w", err)
			}
		}
	}
	return nil
}
func (s *_Irpc_namedTestcontainsSaturday2Req) Deserialize(d *irpcgen.Decoder) error {
	{ // s.Param0_wds []weekDay
		var ul uint64
		if err := d.UvarInt64(&ul); err != nil {
			return fmt.Errorf("deserialize ul of type 'uint64': %w", err)
		}
		var l int = int(ul)
		s.Param0_wds = make([]weekDay, l)
		for i := range l {
			if err := d.Uint8((*uint8)(&s.Param0_wds[i])); err != nil {
				return fmt.Errorf("deserialize s.Param0_wds[i] of type 'uint8': %w", err)
			}
		}
	}
	return nil
}

type _Irpc_namedTestcontainsSaturday2Resp struct {
	Param0 bool
}

func (s _Irpc_namedTestcontainsSaturday2Resp) Serialize(e *irpcgen.Encoder) error {
	if err := e.Bool(s.Param0); err != nil {
		return fmt.Errorf("serialize s.Param0 of type 'bool': %w", err)
	}
	return nil
}
func (s *_Irpc_namedTestcontainsSaturday2Resp) Deserialize(d *irpcgen.Decoder) error {
	if err := d.Bool(&s.Param0); err != nil {
		return fmt.Errorf("deserialize s.Param0 of type 'bool': %w", err)
	}
	return nil
}

type _Irpc_namedTestnamedBytesSumReq struct {
	Param0_nb namedByteSliceType
}

func (s _Irpc_namedTestnamedBytesSumReq) Serialize(e *irpcgen.Encoder) error {
	if err := e.ByteSlice([]byte(s.Param0_nb)); err != nil {
		return fmt.Errorf("serialize s.Param0_nb of type '[]byte': %w", err)
	}
	return nil
}
func (s *_Irpc_namedTestnamedBytesSumReq) Deserialize(d *irpcgen.Decoder) error {
	if err := d.ByteSlice((*[]byte)(&s.Param0_nb)); err != nil {
		return fmt.Errorf("deserialize s.Param0_nb of type '[]byte': %w", err)
	}
	return nil
}

type _Irpc_namedTestnamedBytesSumResp struct {
	Param0 int
}

func (s _Irpc_namedTestnamedBytesSumResp) Serialize(e *irpcgen.Encoder) error {
	if err := e.VarInt(s.Param0); err != nil {
		return fmt.Errorf("serialize s.Param0 of type 'int': %w", err)
	}
	return nil
}
func (s *_Irpc_namedTestnamedBytesSumResp) Deserialize(d *irpcgen.Decoder) error {
	if err := d.VarInt(&s.Param0); err != nil {
		return fmt.Errorf("deserialize s.Param0 of type 'int': %w", err)
	}
	return nil
}
