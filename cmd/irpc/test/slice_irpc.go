// Code generated by irpc generator; DO NOT EDIT
package irpctestpkg

import (
	"context"
	"fmt"
	"github.com/marben/irpc/irpcgen"
)

type sliceTestIRpcService struct {
	impl sliceTest
	id   []byte
}

func newSliceTestIRpcService(impl sliceTest) *sliceTestIRpcService {
	return &sliceTestIRpcService{
		impl: impl,
		id: []byte{
			0x50, 0x22, 0xd3, 0xd8, 0x2a, 0xec, 0x7e, 0x4b,
			0x8f, 0xa0, 0xe7, 0x2b, 0x2c, 0x4e, 0xdf, 0x86,
			0xa0, 0xfb, 0x27, 0x0c, 0x02, 0x16, 0xac, 0xb4,
			0xf0, 0x3f, 0xa2, 0x14, 0x22, 0x70, 0xfa, 0xd2,
		},
	}
}
func (s *sliceTestIRpcService) Id() []byte {
	return s.id
}
func (s *sliceTestIRpcService) GetFuncCall(funcId irpcgen.FuncId) (irpcgen.ArgDeserializer, error) {
	switch funcId {
	case 0: // SliceSum
		return func(d *irpcgen.Decoder) (irpcgen.FuncExecutor, error) {
			// DESERIALIZE
			var args _Irpc_sliceTestSliceSumReq
			if err := args.Deserialize(d); err != nil {
				return nil, err
			}
			return func(ctx context.Context) irpcgen.Serializable {
				// EXECUTE
				var resp _Irpc_sliceTestSliceSumResp
				resp.Param0 = s.impl.SliceSum(args.Param0_slice)
				return resp
			}, nil
		}, nil
	case 1: // VectMult
		return func(d *irpcgen.Decoder) (irpcgen.FuncExecutor, error) {
			// DESERIALIZE
			var args _Irpc_sliceTestVectMultReq
			if err := args.Deserialize(d); err != nil {
				return nil, err
			}
			return func(ctx context.Context) irpcgen.Serializable {
				// EXECUTE
				var resp _Irpc_sliceTestVectMultResp
				resp.Param0 = s.impl.VectMult(args.Param0_vect, args.Param1_s)
				return resp
			}, nil
		}, nil
	case 2: // SliceOfFloat64Sum
		return func(d *irpcgen.Decoder) (irpcgen.FuncExecutor, error) {
			// DESERIALIZE
			var args _Irpc_sliceTestSliceOfFloat64SumReq
			if err := args.Deserialize(d); err != nil {
				return nil, err
			}
			return func(ctx context.Context) irpcgen.Serializable {
				// EXECUTE
				var resp _Irpc_sliceTestSliceOfFloat64SumResp
				resp.Param0 = s.impl.SliceOfFloat64Sum(args.Param0_slice)
				return resp
			}, nil
		}, nil
	case 3: // SliceOfSlicesSum
		return func(d *irpcgen.Decoder) (irpcgen.FuncExecutor, error) {
			// DESERIALIZE
			var args _Irpc_sliceTestSliceOfSlicesSumReq
			if err := args.Deserialize(d); err != nil {
				return nil, err
			}
			return func(ctx context.Context) irpcgen.Serializable {
				// EXECUTE
				var resp _Irpc_sliceTestSliceOfSlicesSumResp
				resp.Param0 = s.impl.SliceOfSlicesSum(args.Param0_slice)
				return resp
			}, nil
		}, nil
	case 4: // SliceOfBytesSum
		return func(d *irpcgen.Decoder) (irpcgen.FuncExecutor, error) {
			// DESERIALIZE
			var args _Irpc_sliceTestSliceOfBytesSumReq
			if err := args.Deserialize(d); err != nil {
				return nil, err
			}
			return func(ctx context.Context) irpcgen.Serializable {
				// EXECUTE
				var resp _Irpc_sliceTestSliceOfBytesSumResp
				resp.Param0 = s.impl.SliceOfBytesSum(args.Param0_slice)
				return resp
			}, nil
		}, nil
	case 5: // namedByteSlice
		return func(d *irpcgen.Decoder) (irpcgen.FuncExecutor, error) {
			// DESERIALIZE
			var args _Irpc_sliceTestnamedByteSliceReq
			if err := args.Deserialize(d); err != nil {
				return nil, err
			}
			return func(ctx context.Context) irpcgen.Serializable {
				// EXECUTE
				var resp _Irpc_sliceTestnamedByteSliceResp
				resp.Param0 = s.impl.namedByteSlice(args.Param0_slice)
				return resp
			}, nil
		}, nil
	default:
		return nil, fmt.Errorf("function '%d' doesn't exist on service '%s'", funcId, s.Id())
	}
}

type sliceTestIRpcClient struct {
	endpoint irpcgen.Endpoint
	id       []byte
}

func newSliceTestIRpcClient(endpoint irpcgen.Endpoint) (*sliceTestIRpcClient, error) {
	id := []byte{
		0x50, 0x22, 0xd3, 0xd8, 0x2a, 0xec, 0x7e, 0x4b,
		0x8f, 0xa0, 0xe7, 0x2b, 0x2c, 0x4e, 0xdf, 0x86,
		0xa0, 0xfb, 0x27, 0x0c, 0x02, 0x16, 0xac, 0xb4,
		0xf0, 0x3f, 0xa2, 0x14, 0x22, 0x70, 0xfa, 0xd2,
	}
	if err := endpoint.RegisterClient(id); err != nil {
		return nil, fmt.Errorf("register failed: %w", err)
	}
	return &sliceTestIRpcClient{endpoint: endpoint, id: id}, nil
}
func (_c *sliceTestIRpcClient) SliceSum(slice []int) int {
	var req = _Irpc_sliceTestSliceSumReq{
		Param0_slice: slice,
	}
	var resp _Irpc_sliceTestSliceSumResp
	if err := _c.endpoint.CallRemoteFunc(context.Background(), _c.id, 0, req, &resp); err != nil {
		panic(err) // to avoid panic, make your func return error and regenerate the code
	}
	return resp.Param0
}
func (_c *sliceTestIRpcClient) VectMult(vect []int, s int) []int {
	var req = _Irpc_sliceTestVectMultReq{
		Param0_vect: vect,
		Param1_s:    s,
	}
	var resp _Irpc_sliceTestVectMultResp
	if err := _c.endpoint.CallRemoteFunc(context.Background(), _c.id, 1, req, &resp); err != nil {
		panic(err) // to avoid panic, make your func return error and regenerate the code
	}
	return resp.Param0
}
func (_c *sliceTestIRpcClient) SliceOfFloat64Sum(slice []float64) float64 {
	var req = _Irpc_sliceTestSliceOfFloat64SumReq{
		Param0_slice: slice,
	}
	var resp _Irpc_sliceTestSliceOfFloat64SumResp
	if err := _c.endpoint.CallRemoteFunc(context.Background(), _c.id, 2, req, &resp); err != nil {
		panic(err) // to avoid panic, make your func return error and regenerate the code
	}
	return resp.Param0
}
func (_c *sliceTestIRpcClient) SliceOfSlicesSum(slice [][]int) int {
	var req = _Irpc_sliceTestSliceOfSlicesSumReq{
		Param0_slice: slice,
	}
	var resp _Irpc_sliceTestSliceOfSlicesSumResp
	if err := _c.endpoint.CallRemoteFunc(context.Background(), _c.id, 3, req, &resp); err != nil {
		panic(err) // to avoid panic, make your func return error and regenerate the code
	}
	return resp.Param0
}
func (_c *sliceTestIRpcClient) SliceOfBytesSum(slice []byte) int {
	var req = _Irpc_sliceTestSliceOfBytesSumReq{
		Param0_slice: slice,
	}
	var resp _Irpc_sliceTestSliceOfBytesSumResp
	if err := _c.endpoint.CallRemoteFunc(context.Background(), _c.id, 4, req, &resp); err != nil {
		panic(err) // to avoid panic, make your func return error and regenerate the code
	}
	return resp.Param0
}
func (_c *sliceTestIRpcClient) namedByteSlice(slice namedByteSlice) int {
	var req = _Irpc_sliceTestnamedByteSliceReq{
		Param0_slice: slice,
	}
	var resp _Irpc_sliceTestnamedByteSliceResp
	if err := _c.endpoint.CallRemoteFunc(context.Background(), _c.id, 5, req, &resp); err != nil {
		panic(err) // to avoid panic, make your func return error and regenerate the code
	}
	return resp.Param0
}

type _Irpc_sliceTestSliceSumReq struct {
	Param0_slice []int
}

func (s _Irpc_sliceTestSliceSumReq) Serialize(e *irpcgen.Encoder) error {
	{ // s.Param0_slice []int
		var l int = len(s.Param0_slice)
		if err := e.UvarInt64(uint64(l)); err != nil {
			return fmt.Errorf("serialize uint64(l) of type \"uint64\": %w", err)
		}
		for _, v := range s.Param0_slice {
			if err := e.VarInt(v); err != nil {
				return fmt.Errorf("serialize v of type \"int\": %w", err)
			}
		}
	}
	return nil
}
func (s *_Irpc_sliceTestSliceSumReq) Deserialize(d *irpcgen.Decoder) error {
	{ // s.Param0_slice []int
		var ul uint64
		if err := d.UvarInt64(&ul); err != nil {
			return fmt.Errorf("deserialize ul of type \"uint64\": %w", err)
		}
		var l int = int(ul)
		s.Param0_slice = make([]int, l)
		for i := range l {
			if err := d.VarInt(&s.Param0_slice[i]); err != nil {
				return fmt.Errorf("deserialize s.Param0_slice[i] of type \"int\": %w", err)
			}
		}
	}
	return nil
}

type _Irpc_sliceTestSliceSumResp struct {
	Param0 int
}

func (s _Irpc_sliceTestSliceSumResp) Serialize(e *irpcgen.Encoder) error {
	if err := e.VarInt(s.Param0); err != nil {
		return fmt.Errorf("serialize s.Param0 of type \"int\": %w", err)
	}
	return nil
}
func (s *_Irpc_sliceTestSliceSumResp) Deserialize(d *irpcgen.Decoder) error {
	if err := d.VarInt(&s.Param0); err != nil {
		return fmt.Errorf("deserialize s.Param0 of type \"int\": %w", err)
	}
	return nil
}

type _Irpc_sliceTestVectMultReq struct {
	Param0_vect []int
	Param1_s    int
}

func (s _Irpc_sliceTestVectMultReq) Serialize(e *irpcgen.Encoder) error {
	{ // s.Param0_vect []int
		var l int = len(s.Param0_vect)
		if err := e.UvarInt64(uint64(l)); err != nil {
			return fmt.Errorf("serialize uint64(l) of type \"uint64\": %w", err)
		}
		for _, v := range s.Param0_vect {
			if err := e.VarInt(v); err != nil {
				return fmt.Errorf("serialize v of type \"int\": %w", err)
			}
		}
	}
	if err := e.VarInt(s.Param1_s); err != nil {
		return fmt.Errorf("serialize s.Param1_s of type \"int\": %w", err)
	}
	return nil
}
func (s *_Irpc_sliceTestVectMultReq) Deserialize(d *irpcgen.Decoder) error {
	{ // s.Param0_vect []int
		var ul uint64
		if err := d.UvarInt64(&ul); err != nil {
			return fmt.Errorf("deserialize ul of type \"uint64\": %w", err)
		}
		var l int = int(ul)
		s.Param0_vect = make([]int, l)
		for i := range l {
			if err := d.VarInt(&s.Param0_vect[i]); err != nil {
				return fmt.Errorf("deserialize s.Param0_vect[i] of type \"int\": %w", err)
			}
		}
	}
	if err := d.VarInt(&s.Param1_s); err != nil {
		return fmt.Errorf("deserialize s.Param1_s of type \"int\": %w", err)
	}
	return nil
}

type _Irpc_sliceTestVectMultResp struct {
	Param0 []int
}

func (s _Irpc_sliceTestVectMultResp) Serialize(e *irpcgen.Encoder) error {
	{ // s.Param0 []int
		var l int = len(s.Param0)
		if err := e.UvarInt64(uint64(l)); err != nil {
			return fmt.Errorf("serialize uint64(l) of type \"uint64\": %w", err)
		}
		for _, v := range s.Param0 {
			if err := e.VarInt(v); err != nil {
				return fmt.Errorf("serialize v of type \"int\": %w", err)
			}
		}
	}
	return nil
}
func (s *_Irpc_sliceTestVectMultResp) Deserialize(d *irpcgen.Decoder) error {
	{ // s.Param0 []int
		var ul uint64
		if err := d.UvarInt64(&ul); err != nil {
			return fmt.Errorf("deserialize ul of type \"uint64\": %w", err)
		}
		var l int = int(ul)
		s.Param0 = make([]int, l)
		for i := range l {
			if err := d.VarInt(&s.Param0[i]); err != nil {
				return fmt.Errorf("deserialize s.Param0[i] of type \"int\": %w", err)
			}
		}
	}
	return nil
}

type _Irpc_sliceTestSliceOfFloat64SumReq struct {
	Param0_slice []float64
}

func (s _Irpc_sliceTestSliceOfFloat64SumReq) Serialize(e *irpcgen.Encoder) error {
	{ // s.Param0_slice []float64
		var l int = len(s.Param0_slice)
		if err := e.UvarInt64(uint64(l)); err != nil {
			return fmt.Errorf("serialize uint64(l) of type \"uint64\": %w", err)
		}
		for _, v := range s.Param0_slice {
			if err := e.Float64le(v); err != nil {
				return fmt.Errorf("serialize v of type \"float64\": %w", err)
			}
		}
	}
	return nil
}
func (s *_Irpc_sliceTestSliceOfFloat64SumReq) Deserialize(d *irpcgen.Decoder) error {
	{ // s.Param0_slice []float64
		var ul uint64
		if err := d.UvarInt64(&ul); err != nil {
			return fmt.Errorf("deserialize ul of type \"uint64\": %w", err)
		}
		var l int = int(ul)
		s.Param0_slice = make([]float64, l)
		for i := range l {
			if err := d.Float64le(&s.Param0_slice[i]); err != nil {
				return fmt.Errorf("deserialize s.Param0_slice[i] of type \"float64\": %w", err)
			}
		}
	}
	return nil
}

type _Irpc_sliceTestSliceOfFloat64SumResp struct {
	Param0 float64
}

func (s _Irpc_sliceTestSliceOfFloat64SumResp) Serialize(e *irpcgen.Encoder) error {
	if err := e.Float64le(s.Param0); err != nil {
		return fmt.Errorf("serialize s.Param0 of type \"float64\": %w", err)
	}
	return nil
}
func (s *_Irpc_sliceTestSliceOfFloat64SumResp) Deserialize(d *irpcgen.Decoder) error {
	if err := d.Float64le(&s.Param0); err != nil {
		return fmt.Errorf("deserialize s.Param0 of type \"float64\": %w", err)
	}
	return nil
}

type _Irpc_sliceTestSliceOfSlicesSumReq struct {
	Param0_slice [][]int
}

func (s _Irpc_sliceTestSliceOfSlicesSumReq) Serialize(e *irpcgen.Encoder) error {
	{ // s.Param0_slice [][]int
		var l int = len(s.Param0_slice)
		if err := e.UvarInt64(uint64(l)); err != nil {
			return fmt.Errorf("serialize uint64(l) of type \"uint64\": %w", err)
		}
		for _, v := range s.Param0_slice {
			{ // v []int
				var l int = len(v)
				if err := e.UvarInt64(uint64(l)); err != nil {
					return fmt.Errorf("serialize uint64(l) of type \"uint64\": %w", err)
				}
				for _, v := range v {
					if err := e.VarInt(v); err != nil {
						return fmt.Errorf("serialize v of type \"int\": %w", err)
					}
				}
			}
		}
	}
	return nil
}
func (s *_Irpc_sliceTestSliceOfSlicesSumReq) Deserialize(d *irpcgen.Decoder) error {
	{ // s.Param0_slice [][]int
		var ul uint64
		if err := d.UvarInt64(&ul); err != nil {
			return fmt.Errorf("deserialize ul of type \"uint64\": %w", err)
		}
		var l int = int(ul)
		s.Param0_slice = make([][]int, l)
		for i := range l {
			{ // s.Param0_slice[i] []int
				var ul uint64
				if err := d.UvarInt64(&ul); err != nil {
					return fmt.Errorf("deserialize ul of type \"uint64\": %w", err)
				}
				var l int = int(ul)
				s.Param0_slice[i] = make([]int, l)
				for j := range l {
					if err := d.VarInt(&s.Param0_slice[i][j]); err != nil {
						return fmt.Errorf("deserialize s.Param0_slice[i][j] of type \"int\": %w", err)
					}
				}
			}
		}
	}
	return nil
}

type _Irpc_sliceTestSliceOfSlicesSumResp struct {
	Param0 int
}

func (s _Irpc_sliceTestSliceOfSlicesSumResp) Serialize(e *irpcgen.Encoder) error {
	if err := e.VarInt(s.Param0); err != nil {
		return fmt.Errorf("serialize s.Param0 of type \"int\": %w", err)
	}
	return nil
}
func (s *_Irpc_sliceTestSliceOfSlicesSumResp) Deserialize(d *irpcgen.Decoder) error {
	if err := d.VarInt(&s.Param0); err != nil {
		return fmt.Errorf("deserialize s.Param0 of type \"int\": %w", err)
	}
	return nil
}

type _Irpc_sliceTestSliceOfBytesSumReq struct {
	Param0_slice []byte
}

func (s _Irpc_sliceTestSliceOfBytesSumReq) Serialize(e *irpcgen.Encoder) error {
	if err := e.ByteSlice(s.Param0_slice); err != nil {
		return fmt.Errorf("serialize s.Param0_slice of type \"[]byte\": %w", err)
	}
	return nil
}
func (s *_Irpc_sliceTestSliceOfBytesSumReq) Deserialize(d *irpcgen.Decoder) error {
	if err := d.ByteSlice(&s.Param0_slice); err != nil {
		return fmt.Errorf("deserialize s.Param0_slice of type \"[]byte\": %w", err)
	}
	return nil
}

type _Irpc_sliceTestSliceOfBytesSumResp struct {
	Param0 int
}

func (s _Irpc_sliceTestSliceOfBytesSumResp) Serialize(e *irpcgen.Encoder) error {
	if err := e.VarInt(s.Param0); err != nil {
		return fmt.Errorf("serialize s.Param0 of type \"int\": %w", err)
	}
	return nil
}
func (s *_Irpc_sliceTestSliceOfBytesSumResp) Deserialize(d *irpcgen.Decoder) error {
	if err := d.VarInt(&s.Param0); err != nil {
		return fmt.Errorf("deserialize s.Param0 of type \"int\": %w", err)
	}
	return nil
}

type _Irpc_sliceTestnamedByteSliceReq struct {
	Param0_slice namedByteSlice
}

func (s _Irpc_sliceTestnamedByteSliceReq) Serialize(e *irpcgen.Encoder) error {
	if err := e.ByteSlice([]byte(s.Param0_slice)); err != nil {
		return fmt.Errorf("serialize s.Param0_slice of type \"[]byte\": %w", err)
	}
	return nil
}
func (s *_Irpc_sliceTestnamedByteSliceReq) Deserialize(d *irpcgen.Decoder) error {
	if err := d.ByteSlice((*[]byte)(&s.Param0_slice)); err != nil {
		return fmt.Errorf("deserialize s.Param0_slice of type \"[]byte\": %w", err)
	}
	return nil
}

type _Irpc_sliceTestnamedByteSliceResp struct {
	Param0 int
}

func (s _Irpc_sliceTestnamedByteSliceResp) Serialize(e *irpcgen.Encoder) error {
	if err := e.VarInt(s.Param0); err != nil {
		return fmt.Errorf("serialize s.Param0 of type \"int\": %w", err)
	}
	return nil
}
func (s *_Irpc_sliceTestnamedByteSliceResp) Deserialize(d *irpcgen.Decoder) error {
	if err := d.VarInt(&s.Param0); err != nil {
		return fmt.Errorf("deserialize s.Param0 of type \"int\": %w", err)
	}
	return nil
}
