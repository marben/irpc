// Code generated by irpc generator; DO NOT EDIT
package irpctestpkg

import (
	"context"
	"fmt"
	"github.com/marben/irpc/irpcgen"
)

type mapTestIRpcService struct {
	impl mapTest
	id   []byte
}

func newMapTestIRpcService(impl mapTest) *mapTestIRpcService {
	return &mapTestIRpcService{
		impl: impl,
		id:   []byte{47, 160, 218, 43, 225, 130, 119, 103, 30, 47, 197, 251, 242, 89, 137, 164, 47, 181, 53, 236, 115, 212, 203, 201, 4, 255, 124, 233, 114, 139, 157, 86},
	}
}
func (s *mapTestIRpcService) Id() []byte {
	return s.id
}
func (s *mapTestIRpcService) GetFuncCall(funcId irpcgen.FuncId) (irpcgen.ArgDeserializer, error) {
	switch funcId {
	case 0: // mapSum
		return func(d *irpcgen.Decoder) (irpcgen.FuncExecutor, error) {
			// DESERIALIZE
			var args _Irpc_mapTestmapSumReq
			if err := args.Deserialize(d); err != nil {
				return nil, err
			}
			return func(ctx context.Context) irpcgen.Serializable {
				// EXECUTE
				var resp _Irpc_mapTestmapSumResp
				resp.Param0_keysSum, resp.Param1_valsSum = s.impl.mapSum(args.Param0_in)
				return resp
			}, nil
		}, nil
	case 1: // sumStructs
		return func(d *irpcgen.Decoder) (irpcgen.FuncExecutor, error) {
			// DESERIALIZE
			var args _Irpc_mapTestsumStructsReq
			if err := args.Deserialize(d); err != nil {
				return nil, err
			}
			return func(ctx context.Context) irpcgen.Serializable {
				// EXECUTE
				var resp _Irpc_mapTestsumStructsResp
				resp.Param0_keysSum, resp.Param0_valsSum = s.impl.sumStructs(args.Param0_in)
				return resp
			}, nil
		}, nil
	case 2: // sumSlices
		return func(d *irpcgen.Decoder) (irpcgen.FuncExecutor, error) {
			// DESERIALIZE
			var args _Irpc_mapTestsumSlicesReq
			if err := args.Deserialize(d); err != nil {
				return nil, err
			}
			return func(ctx context.Context) irpcgen.Serializable {
				// EXECUTE
				var resp _Irpc_mapTestsumSlicesResp
				resp.Param0_keysSum, resp.Param0_valsSum = s.impl.sumSlices(args.Param0_in)
				return resp
			}, nil
		}, nil
	case 3: // namedMapInc
		return func(d *irpcgen.Decoder) (irpcgen.FuncExecutor, error) {
			// DESERIALIZE
			var args _Irpc_mapTestnamedMapIncReq
			if err := args.Deserialize(d); err != nil {
				return nil, err
			}
			return func(ctx context.Context) irpcgen.Serializable {
				// EXECUTE
				var resp _Irpc_mapTestnamedMapIncResp
				resp.Param0 = s.impl.namedMapInc(args.Param0_in)
				return resp
			}, nil
		}, nil
	case 4: // namedKeySum
		return func(d *irpcgen.Decoder) (irpcgen.FuncExecutor, error) {
			// DESERIALIZE
			var args _Irpc_mapTestnamedKeySumReq
			if err := args.Deserialize(d); err != nil {
				return nil, err
			}
			return func(ctx context.Context) irpcgen.Serializable {
				// EXECUTE
				var resp _Irpc_mapTestnamedKeySumResp
				resp.Param0 = s.impl.namedKeySum(args.Param0_in)
				return resp
			}, nil
		}, nil
	default:
		return nil, fmt.Errorf("function '%d' doesn't exist on service '%s'", funcId, s.Id())
	}
}

type mapTestIRpcClient struct {
	endpoint irpcgen.Endpoint
	id       []byte
}

func newMapTestIRpcClient(endpoint irpcgen.Endpoint) (*mapTestIRpcClient, error) {
	id := []byte{47, 160, 218, 43, 225, 130, 119, 103, 30, 47, 197, 251, 242, 89, 137, 164, 47, 181, 53, 236, 115, 212, 203, 201, 4, 255, 124, 233, 114, 139, 157, 86}
	if err := endpoint.RegisterClient(id); err != nil {
		return nil, fmt.Errorf("register failed: %w", err)
	}
	return &mapTestIRpcClient{endpoint: endpoint, id: id}, nil
}
func (_c *mapTestIRpcClient) mapSum(in map[int]float64) (keysSum int, valsSum float64) {
	var req = _Irpc_mapTestmapSumReq{
		Param0_in: in,
	}
	var resp _Irpc_mapTestmapSumResp
	if err := _c.endpoint.CallRemoteFunc(context.Background(), _c.id, 0, req, &resp); err != nil {
		panic(err) // to avoid panic, make your func return error and regenerate the code
	}
	return resp.Param0_keysSum, resp.Param1_valsSum
}
func (_c *mapTestIRpcClient) sumStructs(in map[intStruct]intStruct) (keysSum int, valsSum int) {
	var req = _Irpc_mapTestsumStructsReq{
		Param0_in: in,
	}
	var resp _Irpc_mapTestsumStructsResp
	if err := _c.endpoint.CallRemoteFunc(context.Background(), _c.id, 1, req, &resp); err != nil {
		panic(err) // to avoid panic, make your func return error and regenerate the code
	}
	return resp.Param0_keysSum, resp.Param0_valsSum
}
func (_c *mapTestIRpcClient) sumSlices(in map[intStruct][]intStruct) (keysSum int, valsSum int) {
	var req = _Irpc_mapTestsumSlicesReq{
		Param0_in: in,
	}
	var resp _Irpc_mapTestsumSlicesResp
	if err := _c.endpoint.CallRemoteFunc(context.Background(), _c.id, 2, req, &resp); err != nil {
		panic(err) // to avoid panic, make your func return error and regenerate the code
	}
	return resp.Param0_keysSum, resp.Param0_valsSum
}
func (_c *mapTestIRpcClient) namedMapInc(in namedIntFloatMap) namedIntFloatMap {
	var req = _Irpc_mapTestnamedMapIncReq{
		Param0_in: in,
	}
	var resp _Irpc_mapTestnamedMapIncResp
	if err := _c.endpoint.CallRemoteFunc(context.Background(), _c.id, 3, req, &resp); err != nil {
		panic(err) // to avoid panic, make your func return error and regenerate the code
	}
	return resp.Param0
}
func (_c *mapTestIRpcClient) namedKeySum(in map[mapNamedInt]mapNamedFloat64) mapNamedFloat64 {
	var req = _Irpc_mapTestnamedKeySumReq{
		Param0_in: in,
	}
	var resp _Irpc_mapTestnamedKeySumResp
	if err := _c.endpoint.CallRemoteFunc(context.Background(), _c.id, 4, req, &resp); err != nil {
		panic(err) // to avoid panic, make your func return error and regenerate the code
	}
	return resp.Param0
}

type _Irpc_mapTestmapSumReq struct {
	Param0_in map[int]float64
}

func (s _Irpc_mapTestmapSumReq) Serialize(e *irpcgen.Encoder) error {
	{ // s.Param0_in map[int]float64
		var l int = len(s.Param0_in)
		if err := e.UvarInt64(uint64(l)); err != nil {
			return fmt.Errorf("serialize uint64(l) of type 'uint64': %w", err)
		}
		for k, v := range s.Param0_in {
			if err := e.VarInt(k); err != nil {
				return fmt.Errorf("serialize k of type 'int': %w", err)
			}
			if err := e.Float64le(v); err != nil {
				return fmt.Errorf("serialize v of type 'float64': %w", err)
			}
		}
	}
	return nil
}
func (s *_Irpc_mapTestmapSumReq) Deserialize(d *irpcgen.Decoder) error {
	{ // s.Param0_in map[int]float64
		var ul uint64
		if err := d.UvarInt64(&ul); err != nil {
			return fmt.Errorf("deserialize ul of type 'uint64': %w", err)
		}
		var l int = int(ul)
		s.Param0_in = make(map[int]float64, l)
		for range l {
			var k int
			if err := d.VarInt(&k); err != nil {
				return fmt.Errorf("deserialize k of type 'int': %w", err)
			}

			var v float64
			if err := d.Float64le(&v); err != nil {
				return fmt.Errorf("deserialize v of type 'float64': %w", err)
			}

			s.Param0_in[k] = v
		}
	}
	return nil
}

type _Irpc_mapTestmapSumResp struct {
	Param0_keysSum int
	Param1_valsSum float64
}

func (s _Irpc_mapTestmapSumResp) Serialize(e *irpcgen.Encoder) error {
	if err := e.VarInt(s.Param0_keysSum); err != nil {
		return fmt.Errorf("serialize s.Param0_keysSum of type 'int': %w", err)
	}
	if err := e.Float64le(s.Param1_valsSum); err != nil {
		return fmt.Errorf("serialize s.Param1_valsSum of type 'float64': %w", err)
	}
	return nil
}
func (s *_Irpc_mapTestmapSumResp) Deserialize(d *irpcgen.Decoder) error {
	if err := d.VarInt(&s.Param0_keysSum); err != nil {
		return fmt.Errorf("deserialize s.Param0_keysSum of type 'int': %w", err)
	}
	if err := d.Float64le(&s.Param1_valsSum); err != nil {
		return fmt.Errorf("deserialize s.Param1_valsSum of type 'float64': %w", err)
	}
	return nil
}

type _Irpc_mapTestsumStructsReq struct {
	Param0_in map[intStruct]intStruct
}

func (s _Irpc_mapTestsumStructsReq) Serialize(e *irpcgen.Encoder) error {
	{ // s.Param0_in map[intStruct]intStruct
		var l int = len(s.Param0_in)
		if err := e.UvarInt64(uint64(l)); err != nil {
			return fmt.Errorf("serialize uint64(l) of type 'uint64': %w", err)
		}
		for k, v := range s.Param0_in {
			if err := e.VarInt(k.i); err != nil {
				return fmt.Errorf("serialize k.i of type 'int': %w", err)
			}
			if err := e.VarInt(k.j); err != nil {
				return fmt.Errorf("serialize k.j of type 'int': %w", err)
			}
			if err := e.VarInt(k.k); err != nil {
				return fmt.Errorf("serialize k.k of type 'int': %w", err)
			}
			if err := e.VarInt(k.l); err != nil {
				return fmt.Errorf("serialize k.l of type 'int': %w", err)
			}
			if err := e.VarInt(v.i); err != nil {
				return fmt.Errorf("serialize v.i of type 'int': %w", err)
			}
			if err := e.VarInt(v.j); err != nil {
				return fmt.Errorf("serialize v.j of type 'int': %w", err)
			}
			if err := e.VarInt(v.k); err != nil {
				return fmt.Errorf("serialize v.k of type 'int': %w", err)
			}
			if err := e.VarInt(v.l); err != nil {
				return fmt.Errorf("serialize v.l of type 'int': %w", err)
			}
		}
	}
	return nil
}
func (s *_Irpc_mapTestsumStructsReq) Deserialize(d *irpcgen.Decoder) error {
	{ // s.Param0_in map[intStruct]intStruct
		var ul uint64
		if err := d.UvarInt64(&ul); err != nil {
			return fmt.Errorf("deserialize ul of type 'uint64': %w", err)
		}
		var l int = int(ul)
		s.Param0_in = make(map[intStruct]intStruct, l)
		for range l {
			var k intStruct
			if err := d.VarInt(&k.i); err != nil {
				return fmt.Errorf("deserialize k.i of type 'int': %w", err)
			}
			if err := d.VarInt(&k.j); err != nil {
				return fmt.Errorf("deserialize k.j of type 'int': %w", err)
			}
			if err := d.VarInt(&k.k); err != nil {
				return fmt.Errorf("deserialize k.k of type 'int': %w", err)
			}
			if err := d.VarInt(&k.l); err != nil {
				return fmt.Errorf("deserialize k.l of type 'int': %w", err)
			}

			var v intStruct
			if err := d.VarInt(&v.i); err != nil {
				return fmt.Errorf("deserialize v.i of type 'int': %w", err)
			}
			if err := d.VarInt(&v.j); err != nil {
				return fmt.Errorf("deserialize v.j of type 'int': %w", err)
			}
			if err := d.VarInt(&v.k); err != nil {
				return fmt.Errorf("deserialize v.k of type 'int': %w", err)
			}
			if err := d.VarInt(&v.l); err != nil {
				return fmt.Errorf("deserialize v.l of type 'int': %w", err)
			}

			s.Param0_in[k] = v
		}
	}
	return nil
}

type _Irpc_mapTestsumStructsResp struct {
	Param0_keysSum int
	Param0_valsSum int
}

func (s _Irpc_mapTestsumStructsResp) Serialize(e *irpcgen.Encoder) error {
	if err := e.VarInt(s.Param0_keysSum); err != nil {
		return fmt.Errorf("serialize s.Param0_keysSum of type 'int': %w", err)
	}
	if err := e.VarInt(s.Param0_valsSum); err != nil {
		return fmt.Errorf("serialize s.Param0_valsSum of type 'int': %w", err)
	}
	return nil
}
func (s *_Irpc_mapTestsumStructsResp) Deserialize(d *irpcgen.Decoder) error {
	if err := d.VarInt(&s.Param0_keysSum); err != nil {
		return fmt.Errorf("deserialize s.Param0_keysSum of type 'int': %w", err)
	}
	if err := d.VarInt(&s.Param0_valsSum); err != nil {
		return fmt.Errorf("deserialize s.Param0_valsSum of type 'int': %w", err)
	}
	return nil
}

type _Irpc_mapTestsumSlicesReq struct {
	Param0_in map[intStruct][]intStruct
}

func (s _Irpc_mapTestsumSlicesReq) Serialize(e *irpcgen.Encoder) error {
	{ // s.Param0_in map[intStruct][]intStruct
		var l int = len(s.Param0_in)
		if err := e.UvarInt64(uint64(l)); err != nil {
			return fmt.Errorf("serialize uint64(l) of type 'uint64': %w", err)
		}
		for k, v := range s.Param0_in {
			if err := e.VarInt(k.i); err != nil {
				return fmt.Errorf("serialize k.i of type 'int': %w", err)
			}
			if err := e.VarInt(k.j); err != nil {
				return fmt.Errorf("serialize k.j of type 'int': %w", err)
			}
			if err := e.VarInt(k.k); err != nil {
				return fmt.Errorf("serialize k.k of type 'int': %w", err)
			}
			if err := e.VarInt(k.l); err != nil {
				return fmt.Errorf("serialize k.l of type 'int': %w", err)
			}
			{ // v []intStruct
				var l int = len(v)
				if err := e.UvarInt64(uint64(l)); err != nil {
					return fmt.Errorf("serialize uint64(l) of type 'uint64': %w", err)
				}
				for _, v := range v {
					if err := e.VarInt(v.i); err != nil {
						return fmt.Errorf("serialize v.i of type 'int': %w", err)
					}
					if err := e.VarInt(v.j); err != nil {
						return fmt.Errorf("serialize v.j of type 'int': %w", err)
					}
					if err := e.VarInt(v.k); err != nil {
						return fmt.Errorf("serialize v.k of type 'int': %w", err)
					}
					if err := e.VarInt(v.l); err != nil {
						return fmt.Errorf("serialize v.l of type 'int': %w", err)
					}
				}
			}
		}
	}
	return nil
}
func (s *_Irpc_mapTestsumSlicesReq) Deserialize(d *irpcgen.Decoder) error {
	{ // s.Param0_in map[intStruct][]intStruct
		var ul uint64
		if err := d.UvarInt64(&ul); err != nil {
			return fmt.Errorf("deserialize ul of type 'uint64': %w", err)
		}
		var l int = int(ul)
		s.Param0_in = make(map[intStruct][]intStruct, l)
		for range l {
			var k intStruct
			if err := d.VarInt(&k.i); err != nil {
				return fmt.Errorf("deserialize k.i of type 'int': %w", err)
			}
			if err := d.VarInt(&k.j); err != nil {
				return fmt.Errorf("deserialize k.j of type 'int': %w", err)
			}
			if err := d.VarInt(&k.k); err != nil {
				return fmt.Errorf("deserialize k.k of type 'int': %w", err)
			}
			if err := d.VarInt(&k.l); err != nil {
				return fmt.Errorf("deserialize k.l of type 'int': %w", err)
			}

			var v []intStruct
			{ // v []intStruct
				var ul uint64
				if err := d.UvarInt64(&ul); err != nil {
					return fmt.Errorf("deserialize ul of type 'uint64': %w", err)
				}
				var l int = int(ul)
				v = make([]intStruct, l)
				for i := range l {
					if err := d.VarInt(&v[i].i); err != nil {
						return fmt.Errorf("deserialize v[i].i of type 'int': %w", err)
					}
					if err := d.VarInt(&v[i].j); err != nil {
						return fmt.Errorf("deserialize v[i].j of type 'int': %w", err)
					}
					if err := d.VarInt(&v[i].k); err != nil {
						return fmt.Errorf("deserialize v[i].k of type 'int': %w", err)
					}
					if err := d.VarInt(&v[i].l); err != nil {
						return fmt.Errorf("deserialize v[i].l of type 'int': %w", err)
					}
				}
			}

			s.Param0_in[k] = v
		}
	}
	return nil
}

type _Irpc_mapTestsumSlicesResp struct {
	Param0_keysSum int
	Param0_valsSum int
}

func (s _Irpc_mapTestsumSlicesResp) Serialize(e *irpcgen.Encoder) error {
	if err := e.VarInt(s.Param0_keysSum); err != nil {
		return fmt.Errorf("serialize s.Param0_keysSum of type 'int': %w", err)
	}
	if err := e.VarInt(s.Param0_valsSum); err != nil {
		return fmt.Errorf("serialize s.Param0_valsSum of type 'int': %w", err)
	}
	return nil
}
func (s *_Irpc_mapTestsumSlicesResp) Deserialize(d *irpcgen.Decoder) error {
	if err := d.VarInt(&s.Param0_keysSum); err != nil {
		return fmt.Errorf("deserialize s.Param0_keysSum of type 'int': %w", err)
	}
	if err := d.VarInt(&s.Param0_valsSum); err != nil {
		return fmt.Errorf("deserialize s.Param0_valsSum of type 'int': %w", err)
	}
	return nil
}

type _Irpc_mapTestnamedMapIncReq struct {
	Param0_in namedIntFloatMap
}

func (s _Irpc_mapTestnamedMapIncReq) Serialize(e *irpcgen.Encoder) error {
	{ // s.Param0_in namedIntFloatMap
		var l int = len(s.Param0_in)
		if err := e.UvarInt64(uint64(l)); err != nil {
			return fmt.Errorf("serialize uint64(l) of type 'uint64': %w", err)
		}
		for k, v := range s.Param0_in {
			if err := e.VarInt(k); err != nil {
				return fmt.Errorf("serialize k of type 'int': %w", err)
			}
			if err := e.Float64le(v); err != nil {
				return fmt.Errorf("serialize v of type 'float64': %w", err)
			}
		}
	}
	return nil
}
func (s *_Irpc_mapTestnamedMapIncReq) Deserialize(d *irpcgen.Decoder) error {
	{ // s.Param0_in namedIntFloatMap
		var ul uint64
		if err := d.UvarInt64(&ul); err != nil {
			return fmt.Errorf("deserialize ul of type 'uint64': %w", err)
		}
		var l int = int(ul)
		s.Param0_in = make(namedIntFloatMap, l)
		for range l {
			var k int
			if err := d.VarInt(&k); err != nil {
				return fmt.Errorf("deserialize k of type 'int': %w", err)
			}

			var v float64
			if err := d.Float64le(&v); err != nil {
				return fmt.Errorf("deserialize v of type 'float64': %w", err)
			}

			s.Param0_in[k] = v
		}
	}
	return nil
}

type _Irpc_mapTestnamedMapIncResp struct {
	Param0 namedIntFloatMap
}

func (s _Irpc_mapTestnamedMapIncResp) Serialize(e *irpcgen.Encoder) error {
	{ // s.Param0 namedIntFloatMap
		var l int = len(s.Param0)
		if err := e.UvarInt64(uint64(l)); err != nil {
			return fmt.Errorf("serialize uint64(l) of type 'uint64': %w", err)
		}
		for k, v := range s.Param0 {
			if err := e.VarInt(k); err != nil {
				return fmt.Errorf("serialize k of type 'int': %w", err)
			}
			if err := e.Float64le(v); err != nil {
				return fmt.Errorf("serialize v of type 'float64': %w", err)
			}
		}
	}
	return nil
}
func (s *_Irpc_mapTestnamedMapIncResp) Deserialize(d *irpcgen.Decoder) error {
	{ // s.Param0 namedIntFloatMap
		var ul uint64
		if err := d.UvarInt64(&ul); err != nil {
			return fmt.Errorf("deserialize ul of type 'uint64': %w", err)
		}
		var l int = int(ul)
		s.Param0 = make(namedIntFloatMap, l)
		for range l {
			var k int
			if err := d.VarInt(&k); err != nil {
				return fmt.Errorf("deserialize k of type 'int': %w", err)
			}

			var v float64
			if err := d.Float64le(&v); err != nil {
				return fmt.Errorf("deserialize v of type 'float64': %w", err)
			}

			s.Param0[k] = v
		}
	}
	return nil
}

type _Irpc_mapTestnamedKeySumReq struct {
	Param0_in map[mapNamedInt]mapNamedFloat64
}

func (s _Irpc_mapTestnamedKeySumReq) Serialize(e *irpcgen.Encoder) error {
	{ // s.Param0_in map[mapNamedInt]mapNamedFloat64
		var l int = len(s.Param0_in)
		if err := e.UvarInt64(uint64(l)); err != nil {
			return fmt.Errorf("serialize uint64(l) of type 'uint64': %w", err)
		}
		for k, v := range s.Param0_in {
			if err := e.VarInt(int(k)); err != nil {
				return fmt.Errorf("serialize k of type 'int': %w", err)
			}
			if err := e.Float64le(float64(v)); err != nil {
				return fmt.Errorf("serialize v of type 'float64': %w", err)
			}
		}
	}
	return nil
}
func (s *_Irpc_mapTestnamedKeySumReq) Deserialize(d *irpcgen.Decoder) error {
	{ // s.Param0_in map[mapNamedInt]mapNamedFloat64
		var ul uint64
		if err := d.UvarInt64(&ul); err != nil {
			return fmt.Errorf("deserialize ul of type 'uint64': %w", err)
		}
		var l int = int(ul)
		s.Param0_in = make(map[mapNamedInt]mapNamedFloat64, l)
		for range l {
			var k mapNamedInt
			if err := d.VarInt((*int)(&k)); err != nil {
				return fmt.Errorf("deserialize k of type 'int': %w", err)
			}

			var v mapNamedFloat64
			if err := d.Float64le((*float64)(&v)); err != nil {
				return fmt.Errorf("deserialize v of type 'float64': %w", err)
			}

			s.Param0_in[k] = v
		}
	}
	return nil
}

type _Irpc_mapTestnamedKeySumResp struct {
	Param0 mapNamedFloat64
}

func (s _Irpc_mapTestnamedKeySumResp) Serialize(e *irpcgen.Encoder) error {
	if err := e.Float64le(float64(s.Param0)); err != nil {
		return fmt.Errorf("serialize s.Param0 of type 'float64': %w", err)
	}
	return nil
}
func (s *_Irpc_mapTestnamedKeySumResp) Deserialize(d *irpcgen.Decoder) error {
	if err := d.Float64le((*float64)(&s.Param0)); err != nil {
		return fmt.Errorf("deserialize s.Param0 of type 'float64': %w", err)
	}
	return nil
}
