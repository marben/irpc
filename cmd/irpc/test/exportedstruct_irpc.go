// Code generated by irpc generator; DO NOT EDIT
package irpctestpkg

import (
	"context"
	"fmt"
	"github.com/marben/irpc/irpcgen"
)

type FileServerIRpcService struct {
	impl FileServer
	id   []byte
}

func NewFileServerIRpcService(impl FileServer) *FileServerIRpcService {
	return &FileServerIRpcService{
		impl: impl,
		id:   []byte{3, 5, 101, 132, 244, 225, 201, 85, 12, 166, 23, 118, 203, 112, 195, 35, 130, 183, 8, 58, 129, 170, 23, 88, 92, 20, 11, 27, 18, 29, 168, 19},
	}
}
func (s *FileServerIRpcService) Id() []byte {
	return s.id
}
func (s *FileServerIRpcService) GetFuncCall(funcId irpcgen.FuncId) (irpcgen.ArgDeserializer, error) {
	switch funcId {
	case 0: // ListFiles
		return func(d *irpcgen.Decoder) (irpcgen.FuncExecutor, error) {
			return func(ctx context.Context) irpcgen.Serializable {
				// EXECUTE
				var resp _Irpc_FileServerListFilesResp
				resp.Param0_, resp.Param1_ = s.impl.ListFiles()
				return resp
			}, nil
		}, nil
	default:
		return nil, fmt.Errorf("function '%d' doesn't exist on service '%s'", funcId, s.Id())
	}
}

type FileServerIRpcClient struct {
	endpoint irpcgen.Endpoint
	id       []byte
}

func NewFileServerIRpcClient(endpoint irpcgen.Endpoint) (*FileServerIRpcClient, error) {
	id := []byte{3, 5, 101, 132, 244, 225, 201, 85, 12, 166, 23, 118, 203, 112, 195, 35, 130, 183, 8, 58, 129, 170, 23, 88, 92, 20, 11, 27, 18, 29, 168, 19}
	if err := endpoint.RegisterClient(id); err != nil {
		return nil, fmt.Errorf("register failed: %w", err)
	}
	return &FileServerIRpcClient{endpoint: endpoint, id: id}, nil
}
func (_c *FileServerIRpcClient) ListFiles() ([]FileInfo, error) {
	var resp _Irpc_FileServerListFilesResp
	if err := _c.endpoint.CallRemoteFunc(context.Background(), _c.id, 0, irpcgen.EmptySerializable{}, &resp); err != nil {
		var zero _Irpc_FileServerListFilesResp
		return zero.Param0_, err
	}
	return resp.Param0_, resp.Param1_
}

type _Irpc_FileServerListFilesResp struct {
	Param0_ []FileInfo
	Param1_ error
}

func (s _Irpc_FileServerListFilesResp) Serialize(e *irpcgen.Encoder) error {
	{ // s.Param0_ []FileInfo
		var l int = len(s.Param0_)
		if err := e.UvarInt64(uint64(l)); err != nil {
			return fmt.Errorf("serialize uint64(l) of type 'uint64': %w", err)
		}
		for _, v := range s.Param0_ {
			if err := e.UvarInt64(v.FileSize); err != nil {
				return fmt.Errorf("serialize v.FileSize of type 'uint64': %w", err)
			}
		}
	}
	{
		var isNil bool
		if s.Param1_ == nil {
			isNil = true
		}
		if err := e.Bool(isNil); err != nil {
			return fmt.Errorf("serialize isNil of type 'bool': %w", err)
		}

		if !isNil {
			{ // Error()
				_Error_0_ := s.Param1_.Error()
				if err := e.String(_Error_0_); err != nil {
					return fmt.Errorf("serialize _Error_0_ of type 'string': %w", err)
				}
			}
		}
	}
	return nil
}
func (s *_Irpc_FileServerListFilesResp) Deserialize(d *irpcgen.Decoder) error {
	{ // s.Param0_ []FileInfo
		var ul uint64
		if err := d.UvarInt64(&ul); err != nil {
			return fmt.Errorf("deserialize ul of type 'uint64': %w", err)
		}
		var l int = int(ul)
		s.Param0_ = make([]FileInfo, l)
		for i := range l {
			if err := d.UvarInt64(&s.Param0_[i].FileSize); err != nil {
				return fmt.Errorf("deserialize s.Param0_[i].FileSize of type 'uint64': %w", err)
			}
		}
	}
	{
		var isNil bool
		if err := d.Bool(&isNil); err != nil {
			return fmt.Errorf("deserialize isNil of type 'bool': %w", err)
		}

		if isNil {
			s.Param1_ = nil
		} else {
			var impl _error_FileServer_irpcInterfaceImpl
			{ // Error()
				if err := d.String(&impl._Error_0_); err != nil {
					return fmt.Errorf("deserialize impl._Error_0_ of type 'string': %w", err)
				}
			}
			s.Param1_ = impl
		}
	}
	return nil
}

type _error_FileServer_irpcInterfaceImpl struct {
	_Error_0_ string
}

func (i _error_FileServer_irpcInterfaceImpl) Error() string {
	return i._Error_0_
}
