// Code generated by irpc generator; DO NOT EDIT
package irpctestpkg

import (
	"context"
	"fmt"
	"github.com/marben/irpc/irpcgen"
)

type FileServerIRpcService struct {
	impl FileServer
	id   []byte
}

func NewFileServerIRpcService(impl FileServer) *FileServerIRpcService {
	return &FileServerIRpcService{
		impl: impl,
		id: []byte{
			0xa9, 0xa3, 0xde, 0x7b, 0x64, 0xd1, 0x0f, 0xd7,
			0x98, 0x0e, 0xb5, 0xe7, 0x8b, 0xbb, 0xc6, 0x41,
			0x65, 0xca, 0x84, 0xde, 0x2b, 0xe8, 0x20, 0xe6,
			0xa4, 0x22, 0x7b, 0xd4, 0x34, 0x74, 0x1d, 0xd3,
		},
	}
}
func (s *FileServerIRpcService) Id() []byte {
	return s.id
}
func (s *FileServerIRpcService) GetFuncCall(funcId irpcgen.FuncId) (irpcgen.ArgDeserializer, error) {
	switch funcId {
	case 0: // ListFiles
		return func(d *irpcgen.Decoder) (irpcgen.FuncExecutor, error) {
			return func(ctx context.Context) irpcgen.Serializable {
				// EXECUTE
				var resp _Irpc_FileServerListFilesResp
				resp.Param0, resp.Param1 = s.impl.ListFiles()
				return resp
			}, nil
		}, nil
	default:
		return nil, fmt.Errorf("function '%d' doesn't exist on service '%s'", funcId, s.Id())
	}
}

type FileServerIRpcClient struct {
	endpoint irpcgen.Endpoint
	id       []byte
}

func NewFileServerIRpcClient(endpoint irpcgen.Endpoint) (*FileServerIRpcClient, error) {
	id := []byte{
		0xa9, 0xa3, 0xde, 0x7b, 0x64, 0xd1, 0x0f, 0xd7,
		0x98, 0x0e, 0xb5, 0xe7, 0x8b, 0xbb, 0xc6, 0x41,
		0x65, 0xca, 0x84, 0xde, 0x2b, 0xe8, 0x20, 0xe6,
		0xa4, 0x22, 0x7b, 0xd4, 0x34, 0x74, 0x1d, 0xd3,
	}
	if err := endpoint.RegisterClient(id); err != nil {
		return nil, fmt.Errorf("register failed: %w", err)
	}
	return &FileServerIRpcClient{endpoint: endpoint, id: id}, nil
}
func (_c *FileServerIRpcClient) ListFiles() ([]FileInfo, error) {
	var resp _Irpc_FileServerListFilesResp
	if err := _c.endpoint.CallRemoteFunc(context.Background(), _c.id, 0, irpcgen.EmptySerializable{}, &resp); err != nil {
		var zero _Irpc_FileServerListFilesResp
		return zero.Param0, err
	}
	return resp.Param0, resp.Param1
}

type _Irpc_FileServerListFilesResp struct {
	Param0 []FileInfo
	Param1 error
}

func (s _Irpc_FileServerListFilesResp) Serialize(e *irpcgen.Encoder) error {
	{ // s.Param0 []FileInfo
		var l int = len(s.Param0)
		if err := e.UvarInt64(uint64(l)); err != nil {
			return fmt.Errorf("serialize uint64(l) of type \"uint64\": %w", err)
		}
		for _, v := range s.Param0 {
			if err := e.UvarInt64(v.FileSize); err != nil {
				return fmt.Errorf("serialize v.FileSize of type \"uint64\": %w", err)
			}
		}
	}
	{
		var isNil bool
		if s.Param1 == nil {
			isNil = true
		}
		if err := e.Bool(isNil); err != nil {
			return fmt.Errorf("serialize isNil of type \"bool\": %w", err)
		}

		if !isNil {
			{ // Error()
				_Error_0_ := s.Param1.Error()
				if err := e.String(_Error_0_); err != nil {
					return fmt.Errorf("serialize _Error_0_ of type \"string\": %w", err)
				}
			}
		}
	}
	return nil
}
func (s *_Irpc_FileServerListFilesResp) Deserialize(d *irpcgen.Decoder) error {
	{ // s.Param0 []FileInfo
		var ul uint64
		if err := d.UvarInt64(&ul); err != nil {
			return fmt.Errorf("deserialize ul of type \"uint64\": %w", err)
		}
		var l int = int(ul)
		s.Param0 = make([]FileInfo, l)
		for i := range l {
			if err := d.UvarInt64(&s.Param0[i].FileSize); err != nil {
				return fmt.Errorf("deserialize s.Param0[i].FileSize of type \"uint64\": %w", err)
			}
		}
	}
	{
		var isNil bool
		if err := d.Bool(&isNil); err != nil {
			return fmt.Errorf("deserialize isNil of type \"bool\": %w", err)
		}

		if isNil {
			s.Param1 = nil
		} else {
			var impl _error_FileServer_impl
			{ // Error()
				if err := d.String(&impl._Error_0_); err != nil {
					return fmt.Errorf("deserialize impl._Error_0_ of type \"string\": %w", err)
				}
			}
			s.Param1 = impl
		}
	}
	return nil
}

type _error_FileServer_impl struct {
	_Error_0_ string
}

func (i _error_FileServer_impl) Error() string {
	return i._Error_0_
}
