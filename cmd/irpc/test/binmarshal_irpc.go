// Code generated by irpc generator; DO NOT EDIT
package irpctestpkg

import (
	"context"
	"fmt"
	"github.com/marben/irpc/irpcgen"
	"time"
)

type binMarshalIRpcService struct {
	impl binMarshal
	id   []byte
}

func newBinMarshalIRpcService(impl binMarshal) *binMarshalIRpcService {
	return &binMarshalIRpcService{
		impl: impl,
		id: []byte{
			0x26, 0xe4, 0x45, 0xef, 0x7a, 0xce, 0x80, 0xc9,
			0x3d, 0xd6, 0x36, 0x79, 0xf3, 0x92, 0xa7, 0x22,
			0x1c, 0xbe, 0xf7, 0x80, 0xad, 0xfa, 0x01, 0xa7,
			0x82, 0x7f, 0x18, 0x4a, 0x0f, 0xe9, 0x9f, 0xf2,
		},
	}
}
func (s *binMarshalIRpcService) Id() []byte {
	return s.id
}
func (s *binMarshalIRpcService) GetFuncCall(funcId irpcgen.FuncId) (irpcgen.ArgDeserializer, error) {
	switch funcId {
	case 0: // reflect
		return func(d *irpcgen.Decoder) (irpcgen.FuncExecutor, error) {
			// DESERIALIZE
			var args _Irpc_binMarshalreflectReq
			if err := args.Deserialize(d); err != nil {
				return nil, err
			}
			return func(ctx context.Context) irpcgen.Serializable {
				// EXECUTE
				var resp _Irpc_binMarshalreflectResp
				resp.Param0 = s.impl.reflect(args.Param0_t)
				return resp
			}, nil
		}, nil
	case 1: // addHour
		return func(d *irpcgen.Decoder) (irpcgen.FuncExecutor, error) {
			// DESERIALIZE
			var args _Irpc_binMarshaladdHourReq
			if err := args.Deserialize(d); err != nil {
				return nil, err
			}
			return func(ctx context.Context) irpcgen.Serializable {
				// EXECUTE
				var resp _Irpc_binMarshaladdHourResp
				resp.Param0 = s.impl.addHour(args.Param0_t)
				return resp
			}, nil
		}, nil
	case 2: // addMyHour
		return func(d *irpcgen.Decoder) (irpcgen.FuncExecutor, error) {
			// DESERIALIZE
			var args _Irpc_binMarshaladdMyHourReq
			if err := args.Deserialize(d); err != nil {
				return nil, err
			}
			return func(ctx context.Context) irpcgen.Serializable {
				// EXECUTE
				var resp _Irpc_binMarshaladdMyHourResp
				resp.Param0 = s.impl.addMyHour(args.Param0_t)
				return resp
			}, nil
		}, nil
	case 3: // addMyStructHour
		return func(d *irpcgen.Decoder) (irpcgen.FuncExecutor, error) {
			// DESERIALIZE
			var args _Irpc_binMarshaladdMyStructHourReq
			if err := args.Deserialize(d); err != nil {
				return nil, err
			}
			return func(ctx context.Context) irpcgen.Serializable {
				// EXECUTE
				var resp _Irpc_binMarshaladdMyStructHourResp
				resp.Param0 = s.impl.addMyStructHour(args.Param0_t)
				return resp
			}, nil
		}, nil
	case 4: // structPass
		return func(d *irpcgen.Decoder) (irpcgen.FuncExecutor, error) {
			// DESERIALIZE
			var args _Irpc_binMarshalstructPassReq
			if err := args.Deserialize(d); err != nil {
				return nil, err
			}
			return func(ctx context.Context) irpcgen.Serializable {
				// EXECUTE
				var resp _Irpc_binMarshalstructPassResp
				resp.Param0 = s.impl.structPass(args.Param0_st)
				return resp
			}, nil
		}, nil
	default:
		return nil, fmt.Errorf("function '%d' doesn't exist on service '%s'", funcId, s.Id())
	}
}

type binMarshalIRpcClient struct {
	endpoint irpcgen.Endpoint
	id       []byte
}

func newBinMarshalIRpcClient(endpoint irpcgen.Endpoint) (*binMarshalIRpcClient, error) {
	id := []byte{
		0x26, 0xe4, 0x45, 0xef, 0x7a, 0xce, 0x80, 0xc9,
		0x3d, 0xd6, 0x36, 0x79, 0xf3, 0x92, 0xa7, 0x22,
		0x1c, 0xbe, 0xf7, 0x80, 0xad, 0xfa, 0x01, 0xa7,
		0x82, 0x7f, 0x18, 0x4a, 0x0f, 0xe9, 0x9f, 0xf2,
	}
	if err := endpoint.RegisterClient(id); err != nil {
		return nil, fmt.Errorf("register failed: %w", err)
	}
	return &binMarshalIRpcClient{endpoint: endpoint, id: id}, nil
}
func (_c *binMarshalIRpcClient) reflect(t time.Time) time.Time {
	var req = _Irpc_binMarshalreflectReq{
		Param0_t: t,
	}
	var resp _Irpc_binMarshalreflectResp
	if err := _c.endpoint.CallRemoteFunc(context.Background(), _c.id, 0, req, &resp); err != nil {
		panic(err) // to avoid panic, make your func return error and regenerate irpc code
	}
	return resp.Param0
}
func (_c *binMarshalIRpcClient) addHour(t time.Time) time.Time {
	var req = _Irpc_binMarshaladdHourReq{
		Param0_t: t,
	}
	var resp _Irpc_binMarshaladdHourResp
	if err := _c.endpoint.CallRemoteFunc(context.Background(), _c.id, 1, req, &resp); err != nil {
		panic(err) // to avoid panic, make your func return error and regenerate irpc code
	}
	return resp.Param0
}
func (_c *binMarshalIRpcClient) addMyHour(t myTime) myTime {
	var req = _Irpc_binMarshaladdMyHourReq{
		Param0_t: t,
	}
	var resp _Irpc_binMarshaladdMyHourResp
	if err := _c.endpoint.CallRemoteFunc(context.Background(), _c.id, 2, req, &resp); err != nil {
		panic(err) // to avoid panic, make your func return error and regenerate irpc code
	}
	return resp.Param0
}
func (_c *binMarshalIRpcClient) addMyStructHour(t myStructTime) myStructTime {
	var req = _Irpc_binMarshaladdMyStructHourReq{
		Param0_t: t,
	}
	var resp _Irpc_binMarshaladdMyStructHourResp
	if err := _c.endpoint.CallRemoteFunc(context.Background(), _c.id, 3, req, &resp); err != nil {
		panic(err) // to avoid panic, make your func return error and regenerate irpc code
	}
	return resp.Param0
}
func (_c *binMarshalIRpcClient) structPass(st structContainingBinMarshallable) structContainingBinMarshallable {
	var req = _Irpc_binMarshalstructPassReq{
		Param0_st: st,
	}
	var resp _Irpc_binMarshalstructPassResp
	if err := _c.endpoint.CallRemoteFunc(context.Background(), _c.id, 4, req, &resp); err != nil {
		panic(err) // to avoid panic, make your func return error and regenerate irpc code
	}
	return resp.Param0
}

type _Irpc_binMarshalreflectReq struct {
	Param0_t time.Time
}

func (s _Irpc_binMarshalreflectReq) Serialize(e *irpcgen.Encoder) error {
	if err := e.BinaryMarshaler(s.Param0_t); err != nil {
		return fmt.Errorf("serialize s.Param0_t of type \"encoding.BinaryUnmarshaler\": %w", err)
	}
	return nil
}
func (s *_Irpc_binMarshalreflectReq) Deserialize(d *irpcgen.Decoder) error {
	if err := d.BinaryUnmarshaler(&s.Param0_t); err != nil {
		return fmt.Errorf("deserialize s.Param0_t of type \"encoding.BinaryUnmarshaler\": %w", err)
	}
	return nil
}

type _Irpc_binMarshalreflectResp struct {
	Param0 time.Time
}

func (s _Irpc_binMarshalreflectResp) Serialize(e *irpcgen.Encoder) error {
	if err := e.BinaryMarshaler(s.Param0); err != nil {
		return fmt.Errorf("serialize s.Param0 of type \"encoding.BinaryUnmarshaler\": %w", err)
	}
	return nil
}
func (s *_Irpc_binMarshalreflectResp) Deserialize(d *irpcgen.Decoder) error {
	if err := d.BinaryUnmarshaler(&s.Param0); err != nil {
		return fmt.Errorf("deserialize s.Param0 of type \"encoding.BinaryUnmarshaler\": %w", err)
	}
	return nil
}

type _Irpc_binMarshaladdHourReq struct {
	Param0_t time.Time
}

func (s _Irpc_binMarshaladdHourReq) Serialize(e *irpcgen.Encoder) error {
	if err := e.BinaryMarshaler(s.Param0_t); err != nil {
		return fmt.Errorf("serialize s.Param0_t of type \"encoding.BinaryUnmarshaler\": %w", err)
	}
	return nil
}
func (s *_Irpc_binMarshaladdHourReq) Deserialize(d *irpcgen.Decoder) error {
	if err := d.BinaryUnmarshaler(&s.Param0_t); err != nil {
		return fmt.Errorf("deserialize s.Param0_t of type \"encoding.BinaryUnmarshaler\": %w", err)
	}
	return nil
}

type _Irpc_binMarshaladdHourResp struct {
	Param0 time.Time
}

func (s _Irpc_binMarshaladdHourResp) Serialize(e *irpcgen.Encoder) error {
	if err := e.BinaryMarshaler(s.Param0); err != nil {
		return fmt.Errorf("serialize s.Param0 of type \"encoding.BinaryUnmarshaler\": %w", err)
	}
	return nil
}
func (s *_Irpc_binMarshaladdHourResp) Deserialize(d *irpcgen.Decoder) error {
	if err := d.BinaryUnmarshaler(&s.Param0); err != nil {
		return fmt.Errorf("deserialize s.Param0 of type \"encoding.BinaryUnmarshaler\": %w", err)
	}
	return nil
}

type _Irpc_binMarshaladdMyHourReq struct {
	Param0_t myTime
}

func (s _Irpc_binMarshaladdMyHourReq) Serialize(e *irpcgen.Encoder) error {
	if err := e.BinaryMarshaler(s.Param0_t); err != nil {
		return fmt.Errorf("serialize s.Param0_t of type \"encoding.BinaryUnmarshaler\": %w", err)
	}
	return nil
}
func (s *_Irpc_binMarshaladdMyHourReq) Deserialize(d *irpcgen.Decoder) error {
	if err := d.BinaryUnmarshaler(&s.Param0_t); err != nil {
		return fmt.Errorf("deserialize s.Param0_t of type \"encoding.BinaryUnmarshaler\": %w", err)
	}
	return nil
}

type _Irpc_binMarshaladdMyHourResp struct {
	Param0 myTime
}

func (s _Irpc_binMarshaladdMyHourResp) Serialize(e *irpcgen.Encoder) error {
	if err := e.BinaryMarshaler(s.Param0); err != nil {
		return fmt.Errorf("serialize s.Param0 of type \"encoding.BinaryUnmarshaler\": %w", err)
	}
	return nil
}
func (s *_Irpc_binMarshaladdMyHourResp) Deserialize(d *irpcgen.Decoder) error {
	if err := d.BinaryUnmarshaler(&s.Param0); err != nil {
		return fmt.Errorf("deserialize s.Param0 of type \"encoding.BinaryUnmarshaler\": %w", err)
	}
	return nil
}

type _Irpc_binMarshaladdMyStructHourReq struct {
	Param0_t myStructTime
}

func (s _Irpc_binMarshaladdMyStructHourReq) Serialize(e *irpcgen.Encoder) error {
	if err := e.BinaryMarshaler(s.Param0_t); err != nil {
		return fmt.Errorf("serialize s.Param0_t of type \"encoding.BinaryUnmarshaler\": %w", err)
	}
	return nil
}
func (s *_Irpc_binMarshaladdMyStructHourReq) Deserialize(d *irpcgen.Decoder) error {
	if err := d.BinaryUnmarshaler(&s.Param0_t); err != nil {
		return fmt.Errorf("deserialize s.Param0_t of type \"encoding.BinaryUnmarshaler\": %w", err)
	}
	return nil
}

type _Irpc_binMarshaladdMyStructHourResp struct {
	Param0 myStructTime
}

func (s _Irpc_binMarshaladdMyStructHourResp) Serialize(e *irpcgen.Encoder) error {
	if err := e.BinaryMarshaler(s.Param0); err != nil {
		return fmt.Errorf("serialize s.Param0 of type \"encoding.BinaryUnmarshaler\": %w", err)
	}
	return nil
}
func (s *_Irpc_binMarshaladdMyStructHourResp) Deserialize(d *irpcgen.Decoder) error {
	if err := d.BinaryUnmarshaler(&s.Param0); err != nil {
		return fmt.Errorf("deserialize s.Param0 of type \"encoding.BinaryUnmarshaler\": %w", err)
	}
	return nil
}

type _Irpc_binMarshalstructPassReq struct {
	Param0_st structContainingBinMarshallable
}

func (s _Irpc_binMarshalstructPassReq) Serialize(e *irpcgen.Encoder) error {
	if err := e.BinaryMarshaler(s.Param0_st.t); err != nil {
		return fmt.Errorf("serialize s.Param0_st.t of type \"encoding.BinaryUnmarshaler\": %w", err)
	}
	return nil
}
func (s *_Irpc_binMarshalstructPassReq) Deserialize(d *irpcgen.Decoder) error {
	if err := d.BinaryUnmarshaler(&s.Param0_st.t); err != nil {
		return fmt.Errorf("deserialize s.Param0_st.t of type \"encoding.BinaryUnmarshaler\": %w", err)
	}
	return nil
}

type _Irpc_binMarshalstructPassResp struct {
	Param0 structContainingBinMarshallable
}

func (s _Irpc_binMarshalstructPassResp) Serialize(e *irpcgen.Encoder) error {
	if err := e.BinaryMarshaler(s.Param0.t); err != nil {
		return fmt.Errorf("serialize s.Param0.t of type \"encoding.BinaryUnmarshaler\": %w", err)
	}
	return nil
}
func (s *_Irpc_binMarshalstructPassResp) Deserialize(d *irpcgen.Decoder) error {
	if err := d.BinaryUnmarshaler(&s.Param0.t); err != nil {
		return fmt.Errorf("deserialize s.Param0.t of type \"encoding.BinaryUnmarshaler\": %w", err)
	}
	return nil
}
