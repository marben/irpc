// Code generated by irpc generator; DO NOT EDIT
package irpctestpkg

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"github.com/marben/irpc/pkg/irpc"
	"io"
	"math"
)

type sliceTestRpcService struct {
	impl sliceTest
}

func newSliceTestRpcService(impl sliceTest) *sliceTestRpcService {
	return &sliceTestRpcService{impl: impl}
}
func (sliceTestRpcService) Id() string {
	return "sliceTestRpcService"
}
func (s *sliceTestRpcService) CallFunc(funcName string, args []byte) ([]byte, error) {
	switch funcName {
	case "SliceSum":
		return s.callSliceSum(args)
	case "VectMult":
		return s.callVectMult(args)
	case "SliceOfFloat64Sum":
		return s.callSliceOfFloat64Sum(args)
	default:
		return nil, fmt.Errorf("function '%s' doesn't exist on service '%s'", funcName, s.Id())
	}
}
func (s *sliceTestRpcService) callSliceSum(params []byte) ([]byte, error) {
	r := bytes.NewBuffer(params)
	var req _Irpc_sliceTestSliceSumReq
	if err := req.Deserialize(r); err != nil {
		return nil, fmt.Errorf("failed to deserialize SliceSum: %w", err)
	}
	var resp _Irpc_sliceTestSliceSumResp
	resp.Param0_ = s.impl.SliceSum(req.Param0_slice)
	b := bytes.NewBuffer(nil)
	err := resp.Serialize(b)
	if err != nil {
		return nil, fmt.Errorf("response serialization failed: %w", err)
	}
	return b.Bytes(), nil
}
func (s *sliceTestRpcService) callVectMult(params []byte) ([]byte, error) {
	r := bytes.NewBuffer(params)
	var req _Irpc_sliceTestVectMultReq
	if err := req.Deserialize(r); err != nil {
		return nil, fmt.Errorf("failed to deserialize VectMult: %w", err)
	}
	var resp _Irpc_sliceTestVectMultResp
	resp.Param0_ = s.impl.VectMult(req.Param0_vect, req.Param1_s)
	b := bytes.NewBuffer(nil)
	err := resp.Serialize(b)
	if err != nil {
		return nil, fmt.Errorf("response serialization failed: %w", err)
	}
	return b.Bytes(), nil
}
func (s *sliceTestRpcService) callSliceOfFloat64Sum(params []byte) ([]byte, error) {
	r := bytes.NewBuffer(params)
	var req _Irpc_sliceTestSliceOfFloat64SumReq
	if err := req.Deserialize(r); err != nil {
		return nil, fmt.Errorf("failed to deserialize SliceOfFloat64Sum: %w", err)
	}
	var resp _Irpc_sliceTestSliceOfFloat64SumResp
	resp.Param0_ = s.impl.SliceOfFloat64Sum(req.Param0_slice)
	b := bytes.NewBuffer(nil)
	err := resp.Serialize(b)
	if err != nil {
		return nil, fmt.Errorf("response serialization failed: %w", err)
	}
	return b.Bytes(), nil
}

type sliceTestRpcClient struct {
	endpoint *irpc.Endpoint
}

func newSliceTestRpcClient(endpoint *irpc.Endpoint) *sliceTestRpcClient {
	return &sliceTestRpcClient{endpoint: endpoint}
}
func (_c *sliceTestRpcClient) SliceSum(slice []int) int {
	var req = _Irpc_sliceTestSliceSumReq{
		Param0_slice: slice,
	}
	var resp _Irpc_sliceTestSliceSumResp
	if err := _c.endpoint.CallRemoteFunc("sliceTestRpcService", "SliceSum", req, &resp); err != nil {
		panic(err)
	}
	return resp.Param0_
}
func (_c *sliceTestRpcClient) VectMult(vect []int, s int) []int {
	var req = _Irpc_sliceTestVectMultReq{
		Param0_vect: vect,
		Param1_s:    s,
	}
	var resp _Irpc_sliceTestVectMultResp
	if err := _c.endpoint.CallRemoteFunc("sliceTestRpcService", "VectMult", req, &resp); err != nil {
		panic(err)
	}
	return resp.Param0_
}
func (_c *sliceTestRpcClient) SliceOfFloat64Sum(slice []float64) float64 {
	var req = _Irpc_sliceTestSliceOfFloat64SumReq{
		Param0_slice: slice,
	}
	var resp _Irpc_sliceTestSliceOfFloat64SumResp
	if err := _c.endpoint.CallRemoteFunc("sliceTestRpcService", "SliceOfFloat64Sum", req, &resp); err != nil {
		panic(err)
	}
	return resp.Param0_
}

type _Irpc_sliceTestSliceSumReq struct {
	Param0_slice []int
}

func (s _Irpc_sliceTestSliceSumReq) Serialize(w io.Writer) error {
	{ // []int
		var l int = len(s.Param0_slice)
		b := make([]byte, 8)
		binary.LittleEndian.PutUint64(b, uint64(l))
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("l int write: %w", err)
		}

		for i := 0; i < l; i++ {
			b := make([]byte, 8)
			binary.LittleEndian.PutUint64(b, uint64(s.Param0_slice[i]))
			if _, err := w.Write(b[:8]); err != nil {
				return fmt.Errorf("s.Param0_slice[i] int write: %w", err)
			}

		}
	}
	return nil
}
func (s *_Irpc_sliceTestSliceSumReq) Deserialize(r io.Reader) error {
	{ // []int
		var l int
		b := make([]byte, 8)
		if _, err := io.ReadFull(r, b[:8]); err != nil {
			return fmt.Errorf("l int decode: %w", err)
		}
		l = int(binary.LittleEndian.Uint64(b))
		s.Param0_slice = make([]int, l)
		for i := 0; i < l; i++ {
			b := make([]byte, 8)
			if _, err := io.ReadFull(r, b[:8]); err != nil {
				return fmt.Errorf("s.Param0_slice[i] int decode: %w", err)
			}
			s.Param0_slice[i] = int(binary.LittleEndian.Uint64(b))
		}
	}
	return nil
}

type _Irpc_sliceTestSliceSumResp struct {
	Param0_ int
}

func (s _Irpc_sliceTestSliceSumResp) Serialize(w io.Writer) error {
	{ // int
		b := make([]byte, 8)
		binary.LittleEndian.PutUint64(b, uint64(s.Param0_))
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("s.Param0_ int write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_sliceTestSliceSumResp) Deserialize(r io.Reader) error {
	{ // int
		b := make([]byte, 8)
		if _, err := io.ReadFull(r, b[:8]); err != nil {
			return fmt.Errorf("s.Param0_ int decode: %w", err)
		}
		s.Param0_ = int(binary.LittleEndian.Uint64(b))
	}
	return nil
}

type _Irpc_sliceTestVectMultReq struct {
	Param0_vect []int
	Param1_s    int
}

func (s _Irpc_sliceTestVectMultReq) Serialize(w io.Writer) error {
	{ // []int
		var l int = len(s.Param0_vect)
		b := make([]byte, 8)
		binary.LittleEndian.PutUint64(b, uint64(l))
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("l int write: %w", err)
		}

		for i := 0; i < l; i++ {
			b := make([]byte, 8)
			binary.LittleEndian.PutUint64(b, uint64(s.Param0_vect[i]))
			if _, err := w.Write(b[:8]); err != nil {
				return fmt.Errorf("s.Param0_vect[i] int write: %w", err)
			}

		}
	}
	{ // int
		b := make([]byte, 8)
		binary.LittleEndian.PutUint64(b, uint64(s.Param1_s))
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("s.Param1_s int write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_sliceTestVectMultReq) Deserialize(r io.Reader) error {
	{ // []int
		var l int
		b := make([]byte, 8)
		if _, err := io.ReadFull(r, b[:8]); err != nil {
			return fmt.Errorf("l int decode: %w", err)
		}
		l = int(binary.LittleEndian.Uint64(b))
		s.Param0_vect = make([]int, l)
		for i := 0; i < l; i++ {
			b := make([]byte, 8)
			if _, err := io.ReadFull(r, b[:8]); err != nil {
				return fmt.Errorf("s.Param0_vect[i] int decode: %w", err)
			}
			s.Param0_vect[i] = int(binary.LittleEndian.Uint64(b))
		}
	}
	{ // int
		b := make([]byte, 8)
		if _, err := io.ReadFull(r, b[:8]); err != nil {
			return fmt.Errorf("s.Param1_s int decode: %w", err)
		}
		s.Param1_s = int(binary.LittleEndian.Uint64(b))
	}
	return nil
}

type _Irpc_sliceTestVectMultResp struct {
	Param0_ []int
}

func (s _Irpc_sliceTestVectMultResp) Serialize(w io.Writer) error {
	{ // []int
		var l int = len(s.Param0_)
		b := make([]byte, 8)
		binary.LittleEndian.PutUint64(b, uint64(l))
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("l int write: %w", err)
		}

		for i := 0; i < l; i++ {
			b := make([]byte, 8)
			binary.LittleEndian.PutUint64(b, uint64(s.Param0_[i]))
			if _, err := w.Write(b[:8]); err != nil {
				return fmt.Errorf("s.Param0_[i] int write: %w", err)
			}

		}
	}
	return nil
}
func (s *_Irpc_sliceTestVectMultResp) Deserialize(r io.Reader) error {
	{ // []int
		var l int
		b := make([]byte, 8)
		if _, err := io.ReadFull(r, b[:8]); err != nil {
			return fmt.Errorf("l int decode: %w", err)
		}
		l = int(binary.LittleEndian.Uint64(b))
		s.Param0_ = make([]int, l)
		for i := 0; i < l; i++ {
			b := make([]byte, 8)
			if _, err := io.ReadFull(r, b[:8]); err != nil {
				return fmt.Errorf("s.Param0_[i] int decode: %w", err)
			}
			s.Param0_[i] = int(binary.LittleEndian.Uint64(b))
		}
	}
	return nil
}

type _Irpc_sliceTestSliceOfFloat64SumReq struct {
	Param0_slice []float64
}

func (s _Irpc_sliceTestSliceOfFloat64SumReq) Serialize(w io.Writer) error {
	{ // []float64
		var l int = len(s.Param0_slice)
		b := make([]byte, 8)
		binary.LittleEndian.PutUint64(b, uint64(l))
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("l int write: %w", err)
		}

		for i := 0; i < l; i++ {
			b := make([]byte, 8)
			binary.LittleEndian.PutUint64(b, math.Float64bits(s.Param0_slice[i]))
			if _, err := w.Write(b[:8]); err != nil {
				return fmt.Errorf("s.Param0_slice[i] float64 write: %w", err)
			}

		}
	}
	return nil
}
func (s *_Irpc_sliceTestSliceOfFloat64SumReq) Deserialize(r io.Reader) error {
	{ // []float64
		var l int
		b := make([]byte, 8)
		if _, err := io.ReadFull(r, b[:8]); err != nil {
			return fmt.Errorf("l int decode: %w", err)
		}
		l = int(binary.LittleEndian.Uint64(b))
		s.Param0_slice = make([]float64, l)
		for i := 0; i < l; i++ {
			b := make([]byte, 8)
			if _, err := io.ReadFull(r, b[:8]); err != nil {
				return fmt.Errorf("s.Param0_slice[i] float64 decode: %w", err)
			}
			s.Param0_slice[i] = math.Float64frombits(binary.LittleEndian.Uint64(b))
		}
	}
	return nil
}

type _Irpc_sliceTestSliceOfFloat64SumResp struct {
	Param0_ float64
}

func (s _Irpc_sliceTestSliceOfFloat64SumResp) Serialize(w io.Writer) error {
	{ // float64
		b := make([]byte, 8)
		binary.LittleEndian.PutUint64(b, math.Float64bits(s.Param0_))
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("s.Param0_ float64 write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_sliceTestSliceOfFloat64SumResp) Deserialize(r io.Reader) error {
	{ // float64
		b := make([]byte, 8)
		if _, err := io.ReadFull(r, b[:8]); err != nil {
			return fmt.Errorf("s.Param0_ float64 decode: %w", err)
		}
		s.Param0_ = math.Float64frombits(binary.LittleEndian.Uint64(b))
	}
	return nil
}
