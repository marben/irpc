// Code generated by irpc generator; DO NOT EDIT
package irpctestpkg

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"io"
	"math"
	"github.com/marben/irpc"
)

type basicAPIRpcService struct {
	impl basicAPI
}

func newBasicAPIRpcService(impl basicAPI) *basicAPIRpcService {
	return &basicAPIRpcService{impl: impl}
}
func (basicAPIRpcService) Id() string {
	return "basicAPIRpcService"
}
func (s *basicAPIRpcService) CallFunc(funcName string, args []byte) ([]byte, error) {
	switch funcName {
	case "addByte":
		return s.calladdByte(args)
	case "addInt":
		return s.calladdInt(args)
	case "swapInt":
		return s.callswapInt(args)
	case "subUint":
		return s.callsubUint(args)
	case "addInt8":
		return s.calladdInt8(args)
	case "addUint8":
		return s.calladdUint8(args)
	case "addInt16":
		return s.calladdInt16(args)
	case "addUint16":
		return s.calladdUint16(args)
	case "addInt32":
		return s.calladdInt32(args)
	case "addUint32":
		return s.calladdUint32(args)
	case "addInt64":
		return s.calladdInt64(args)
	case "addUint64":
		return s.calladdUint64(args)
	case "addFloat64":
		return s.calladdFloat64(args)
	case "addFloat32":
		return s.calladdFloat32(args)
	case "toUpper":
		return s.calltoUpper(args)
	case "toUpperString":
		return s.calltoUpperString(args)
	case "negBool":
		return s.callnegBool(args)
	default:
		return nil, fmt.Errorf("function '%s' doesn't exist on service '%s'", funcName, s.Id())
	}
}
func (s *basicAPIRpcService) calladdByte(params []byte) ([]byte, error) {
	r := bytes.NewBuffer(params)
	var req _Irpc_basicAPIaddByteReq
	if err := req.Deserialize(r); err != nil {
		return nil, fmt.Errorf("failed to deserialize addByte: %w", err)
	}
	var resp _Irpc_basicAPIaddByteResp
	resp.Param0_ = s.impl.addByte(req.Param0_a, req.Param1_b)
	b := bytes.NewBuffer(nil)
	err := resp.Serialize(b)
	if err != nil {
		return nil, fmt.Errorf("response serialization failed: %w", err)
	}
	return b.Bytes(), nil
}
func (s *basicAPIRpcService) calladdInt(params []byte) ([]byte, error) {
	r := bytes.NewBuffer(params)
	var req _Irpc_basicAPIaddIntReq
	if err := req.Deserialize(r); err != nil {
		return nil, fmt.Errorf("failed to deserialize addInt: %w", err)
	}
	var resp _Irpc_basicAPIaddIntResp
	resp.Param0_ = s.impl.addInt(req.Param0_a, req.Param1_b)
	b := bytes.NewBuffer(nil)
	err := resp.Serialize(b)
	if err != nil {
		return nil, fmt.Errorf("response serialization failed: %w", err)
	}
	return b.Bytes(), nil
}
func (s *basicAPIRpcService) callswapInt(params []byte) ([]byte, error) {
	r := bytes.NewBuffer(params)
	var req _Irpc_basicAPIswapIntReq
	if err := req.Deserialize(r); err != nil {
		return nil, fmt.Errorf("failed to deserialize swapInt: %w", err)
	}
	var resp _Irpc_basicAPIswapIntResp
	resp.Param0_, resp.Param1_ = s.impl.swapInt(req.Param0_a, req.Param1_b)
	b := bytes.NewBuffer(nil)
	err := resp.Serialize(b)
	if err != nil {
		return nil, fmt.Errorf("response serialization failed: %w", err)
	}
	return b.Bytes(), nil
}
func (s *basicAPIRpcService) callsubUint(params []byte) ([]byte, error) {
	r := bytes.NewBuffer(params)
	var req _Irpc_basicAPIsubUintReq
	if err := req.Deserialize(r); err != nil {
		return nil, fmt.Errorf("failed to deserialize subUint: %w", err)
	}
	var resp _Irpc_basicAPIsubUintResp
	resp.Param0_ = s.impl.subUint(req.Param0_a, req.Param0_b)
	b := bytes.NewBuffer(nil)
	err := resp.Serialize(b)
	if err != nil {
		return nil, fmt.Errorf("response serialization failed: %w", err)
	}
	return b.Bytes(), nil
}
func (s *basicAPIRpcService) calladdInt8(params []byte) ([]byte, error) {
	r := bytes.NewBuffer(params)
	var req _Irpc_basicAPIaddInt8Req
	if err := req.Deserialize(r); err != nil {
		return nil, fmt.Errorf("failed to deserialize addInt8: %w", err)
	}
	var resp _Irpc_basicAPIaddInt8Resp
	resp.Param0_ = s.impl.addInt8(req.Param0_a, req.Param0_b)
	b := bytes.NewBuffer(nil)
	err := resp.Serialize(b)
	if err != nil {
		return nil, fmt.Errorf("response serialization failed: %w", err)
	}
	return b.Bytes(), nil
}
func (s *basicAPIRpcService) calladdUint8(params []byte) ([]byte, error) {
	r := bytes.NewBuffer(params)
	var req _Irpc_basicAPIaddUint8Req
	if err := req.Deserialize(r); err != nil {
		return nil, fmt.Errorf("failed to deserialize addUint8: %w", err)
	}
	var resp _Irpc_basicAPIaddUint8Resp
	resp.Param0_ = s.impl.addUint8(req.Param0_a, req.Param0_b)
	b := bytes.NewBuffer(nil)
	err := resp.Serialize(b)
	if err != nil {
		return nil, fmt.Errorf("response serialization failed: %w", err)
	}
	return b.Bytes(), nil
}
func (s *basicAPIRpcService) calladdInt16(params []byte) ([]byte, error) {
	r := bytes.NewBuffer(params)
	var req _Irpc_basicAPIaddInt16Req
	if err := req.Deserialize(r); err != nil {
		return nil, fmt.Errorf("failed to deserialize addInt16: %w", err)
	}
	var resp _Irpc_basicAPIaddInt16Resp
	resp.Param0_ = s.impl.addInt16(req.Param0_a, req.Param0_b)
	b := bytes.NewBuffer(nil)
	err := resp.Serialize(b)
	if err != nil {
		return nil, fmt.Errorf("response serialization failed: %w", err)
	}
	return b.Bytes(), nil
}
func (s *basicAPIRpcService) calladdUint16(params []byte) ([]byte, error) {
	r := bytes.NewBuffer(params)
	var req _Irpc_basicAPIaddUint16Req
	if err := req.Deserialize(r); err != nil {
		return nil, fmt.Errorf("failed to deserialize addUint16: %w", err)
	}
	var resp _Irpc_basicAPIaddUint16Resp
	resp.Param0_ = s.impl.addUint16(req.Param0_a, req.Param0_b)
	b := bytes.NewBuffer(nil)
	err := resp.Serialize(b)
	if err != nil {
		return nil, fmt.Errorf("response serialization failed: %w", err)
	}
	return b.Bytes(), nil
}
func (s *basicAPIRpcService) calladdInt32(params []byte) ([]byte, error) {
	r := bytes.NewBuffer(params)
	var req _Irpc_basicAPIaddInt32Req
	if err := req.Deserialize(r); err != nil {
		return nil, fmt.Errorf("failed to deserialize addInt32: %w", err)
	}
	var resp _Irpc_basicAPIaddInt32Resp
	resp.Param0_ = s.impl.addInt32(req.Param0_a, req.Param0_b)
	b := bytes.NewBuffer(nil)
	err := resp.Serialize(b)
	if err != nil {
		return nil, fmt.Errorf("response serialization failed: %w", err)
	}
	return b.Bytes(), nil
}
func (s *basicAPIRpcService) calladdUint32(params []byte) ([]byte, error) {
	r := bytes.NewBuffer(params)
	var req _Irpc_basicAPIaddUint32Req
	if err := req.Deserialize(r); err != nil {
		return nil, fmt.Errorf("failed to deserialize addUint32: %w", err)
	}
	var resp _Irpc_basicAPIaddUint32Resp
	resp.Param0_ = s.impl.addUint32(req.Param0_a, req.Param0_b)
	b := bytes.NewBuffer(nil)
	err := resp.Serialize(b)
	if err != nil {
		return nil, fmt.Errorf("response serialization failed: %w", err)
	}
	return b.Bytes(), nil
}
func (s *basicAPIRpcService) calladdInt64(params []byte) ([]byte, error) {
	r := bytes.NewBuffer(params)
	var req _Irpc_basicAPIaddInt64Req
	if err := req.Deserialize(r); err != nil {
		return nil, fmt.Errorf("failed to deserialize addInt64: %w", err)
	}
	var resp _Irpc_basicAPIaddInt64Resp
	resp.Param0_ = s.impl.addInt64(req.Param0_a, req.Param0_b)
	b := bytes.NewBuffer(nil)
	err := resp.Serialize(b)
	if err != nil {
		return nil, fmt.Errorf("response serialization failed: %w", err)
	}
	return b.Bytes(), nil
}
func (s *basicAPIRpcService) calladdUint64(params []byte) ([]byte, error) {
	r := bytes.NewBuffer(params)
	var req _Irpc_basicAPIaddUint64Req
	if err := req.Deserialize(r); err != nil {
		return nil, fmt.Errorf("failed to deserialize addUint64: %w", err)
	}
	var resp _Irpc_basicAPIaddUint64Resp
	resp.Param0_ = s.impl.addUint64(req.Param0_a, req.Param0_b)
	b := bytes.NewBuffer(nil)
	err := resp.Serialize(b)
	if err != nil {
		return nil, fmt.Errorf("response serialization failed: %w", err)
	}
	return b.Bytes(), nil
}
func (s *basicAPIRpcService) calladdFloat64(params []byte) ([]byte, error) {
	r := bytes.NewBuffer(params)
	var req _Irpc_basicAPIaddFloat64Req
	if err := req.Deserialize(r); err != nil {
		return nil, fmt.Errorf("failed to deserialize addFloat64: %w", err)
	}
	var resp _Irpc_basicAPIaddFloat64Resp
	resp.Param0_ = s.impl.addFloat64(req.Param0_a, req.Param0_b)
	b := bytes.NewBuffer(nil)
	err := resp.Serialize(b)
	if err != nil {
		return nil, fmt.Errorf("response serialization failed: %w", err)
	}
	return b.Bytes(), nil
}
func (s *basicAPIRpcService) calladdFloat32(params []byte) ([]byte, error) {
	r := bytes.NewBuffer(params)
	var req _Irpc_basicAPIaddFloat32Req
	if err := req.Deserialize(r); err != nil {
		return nil, fmt.Errorf("failed to deserialize addFloat32: %w", err)
	}
	var resp _Irpc_basicAPIaddFloat32Resp
	resp.Param0_ = s.impl.addFloat32(req.Param0_a, req.Param0_b)
	b := bytes.NewBuffer(nil)
	err := resp.Serialize(b)
	if err != nil {
		return nil, fmt.Errorf("response serialization failed: %w", err)
	}
	return b.Bytes(), nil
}
func (s *basicAPIRpcService) calltoUpper(params []byte) ([]byte, error) {
	r := bytes.NewBuffer(params)
	var req _Irpc_basicAPItoUpperReq
	if err := req.Deserialize(r); err != nil {
		return nil, fmt.Errorf("failed to deserialize toUpper: %w", err)
	}
	var resp _Irpc_basicAPItoUpperResp
	resp.Param0_ = s.impl.toUpper(req.Param0_c)
	b := bytes.NewBuffer(nil)
	err := resp.Serialize(b)
	if err != nil {
		return nil, fmt.Errorf("response serialization failed: %w", err)
	}
	return b.Bytes(), nil
}
func (s *basicAPIRpcService) calltoUpperString(params []byte) ([]byte, error) {
	r := bytes.NewBuffer(params)
	var req _Irpc_basicAPItoUpperStringReq
	if err := req.Deserialize(r); err != nil {
		return nil, fmt.Errorf("failed to deserialize toUpperString: %w", err)
	}
	var resp _Irpc_basicAPItoUpperStringResp
	resp.Param0_ = s.impl.toUpperString(req.Param0_s)
	b := bytes.NewBuffer(nil)
	err := resp.Serialize(b)
	if err != nil {
		return nil, fmt.Errorf("response serialization failed: %w", err)
	}
	return b.Bytes(), nil
}
func (s *basicAPIRpcService) callnegBool(params []byte) ([]byte, error) {
	r := bytes.NewBuffer(params)
	var req _Irpc_basicAPInegBoolReq
	if err := req.Deserialize(r); err != nil {
		return nil, fmt.Errorf("failed to deserialize negBool: %w", err)
	}
	var resp _Irpc_basicAPInegBoolResp
	resp.Param0_ = s.impl.negBool(req.Param0_ok)
	b := bytes.NewBuffer(nil)
	err := resp.Serialize(b)
	if err != nil {
		return nil, fmt.Errorf("response serialization failed: %w", err)
	}
	return b.Bytes(), nil
}

type emptyAPIRpcService struct {
	impl emptyAPI
}

func newEmptyAPIRpcService(impl emptyAPI) *emptyAPIRpcService {
	return &emptyAPIRpcService{impl: impl}
}
func (emptyAPIRpcService) Id() string {
	return "emptyAPIRpcService"
}
func (s *emptyAPIRpcService) CallFunc(funcName string, args []byte) ([]byte, error) {
	switch funcName {
	default:
		return nil, fmt.Errorf("function '%s' doesn't exist on service '%s'", funcName, s.Id())
	}
}

type basicAPIRpcClient struct {
	endpoint *irpc.Endpoint
}

func newBasicAPIRpcClient(endpoint *irpc.Endpoint) *basicAPIRpcClient {
	return &basicAPIRpcClient{endpoint: endpoint}
}
func (_c *basicAPIRpcClient) addByte(a byte, b byte) byte {
	var req = _Irpc_basicAPIaddByteReq{
		Param0_a: a,
		Param1_b: b,
	}
	var resp _Irpc_basicAPIaddByteResp
	if err := _c.endpoint.CallRemoteFunc("basicAPIRpcService", "addByte", req, &resp); err != nil {
		panic(err)
	}
	return resp.Param0_
}
func (_c *basicAPIRpcClient) addInt(a int, b int) int {
	var req = _Irpc_basicAPIaddIntReq{
		Param0_a: a,
		Param1_b: b,
	}
	var resp _Irpc_basicAPIaddIntResp
	if err := _c.endpoint.CallRemoteFunc("basicAPIRpcService", "addInt", req, &resp); err != nil {
		panic(err)
	}
	return resp.Param0_
}
func (_c *basicAPIRpcClient) swapInt(a int, b int) (int, int) {
	var req = _Irpc_basicAPIswapIntReq{
		Param0_a: a,
		Param1_b: b,
	}
	var resp _Irpc_basicAPIswapIntResp
	if err := _c.endpoint.CallRemoteFunc("basicAPIRpcService", "swapInt", req, &resp); err != nil {
		panic(err)
	}
	return resp.Param0_, resp.Param1_
}
func (_c *basicAPIRpcClient) subUint(a uint, b uint) uint {
	var req = _Irpc_basicAPIsubUintReq{
		Param0_a: a,
		Param0_b: b,
	}
	var resp _Irpc_basicAPIsubUintResp
	if err := _c.endpoint.CallRemoteFunc("basicAPIRpcService", "subUint", req, &resp); err != nil {
		panic(err)
	}
	return resp.Param0_
}
func (_c *basicAPIRpcClient) addInt8(a int8, b int8) int8 {
	var req = _Irpc_basicAPIaddInt8Req{
		Param0_a: a,
		Param0_b: b,
	}
	var resp _Irpc_basicAPIaddInt8Resp
	if err := _c.endpoint.CallRemoteFunc("basicAPIRpcService", "addInt8", req, &resp); err != nil {
		panic(err)
	}
	return resp.Param0_
}
func (_c *basicAPIRpcClient) addUint8(a uint8, b uint8) uint8 {
	var req = _Irpc_basicAPIaddUint8Req{
		Param0_a: a,
		Param0_b: b,
	}
	var resp _Irpc_basicAPIaddUint8Resp
	if err := _c.endpoint.CallRemoteFunc("basicAPIRpcService", "addUint8", req, &resp); err != nil {
		panic(err)
	}
	return resp.Param0_
}
func (_c *basicAPIRpcClient) addInt16(a int16, b int16) int16 {
	var req = _Irpc_basicAPIaddInt16Req{
		Param0_a: a,
		Param0_b: b,
	}
	var resp _Irpc_basicAPIaddInt16Resp
	if err := _c.endpoint.CallRemoteFunc("basicAPIRpcService", "addInt16", req, &resp); err != nil {
		panic(err)
	}
	return resp.Param0_
}
func (_c *basicAPIRpcClient) addUint16(a uint16, b uint16) uint16 {
	var req = _Irpc_basicAPIaddUint16Req{
		Param0_a: a,
		Param0_b: b,
	}
	var resp _Irpc_basicAPIaddUint16Resp
	if err := _c.endpoint.CallRemoteFunc("basicAPIRpcService", "addUint16", req, &resp); err != nil {
		panic(err)
	}
	return resp.Param0_
}
func (_c *basicAPIRpcClient) addInt32(a int32, b int32) int32 {
	var req = _Irpc_basicAPIaddInt32Req{
		Param0_a: a,
		Param0_b: b,
	}
	var resp _Irpc_basicAPIaddInt32Resp
	if err := _c.endpoint.CallRemoteFunc("basicAPIRpcService", "addInt32", req, &resp); err != nil {
		panic(err)
	}
	return resp.Param0_
}
func (_c *basicAPIRpcClient) addUint32(a uint32, b uint32) uint32 {
	var req = _Irpc_basicAPIaddUint32Req{
		Param0_a: a,
		Param0_b: b,
	}
	var resp _Irpc_basicAPIaddUint32Resp
	if err := _c.endpoint.CallRemoteFunc("basicAPIRpcService", "addUint32", req, &resp); err != nil {
		panic(err)
	}
	return resp.Param0_
}
func (_c *basicAPIRpcClient) addInt64(a int64, b int64) int64 {
	var req = _Irpc_basicAPIaddInt64Req{
		Param0_a: a,
		Param0_b: b,
	}
	var resp _Irpc_basicAPIaddInt64Resp
	if err := _c.endpoint.CallRemoteFunc("basicAPIRpcService", "addInt64", req, &resp); err != nil {
		panic(err)
	}
	return resp.Param0_
}
func (_c *basicAPIRpcClient) addUint64(a uint64, b uint64) uint64 {
	var req = _Irpc_basicAPIaddUint64Req{
		Param0_a: a,
		Param0_b: b,
	}
	var resp _Irpc_basicAPIaddUint64Resp
	if err := _c.endpoint.CallRemoteFunc("basicAPIRpcService", "addUint64", req, &resp); err != nil {
		panic(err)
	}
	return resp.Param0_
}
func (_c *basicAPIRpcClient) addFloat64(a float64, b float64) float64 {
	var req = _Irpc_basicAPIaddFloat64Req{
		Param0_a: a,
		Param0_b: b,
	}
	var resp _Irpc_basicAPIaddFloat64Resp
	if err := _c.endpoint.CallRemoteFunc("basicAPIRpcService", "addFloat64", req, &resp); err != nil {
		panic(err)
	}
	return resp.Param0_
}
func (_c *basicAPIRpcClient) addFloat32(a float32, b float32) float32 {
	var req = _Irpc_basicAPIaddFloat32Req{
		Param0_a: a,
		Param0_b: b,
	}
	var resp _Irpc_basicAPIaddFloat32Resp
	if err := _c.endpoint.CallRemoteFunc("basicAPIRpcService", "addFloat32", req, &resp); err != nil {
		panic(err)
	}
	return resp.Param0_
}
func (_c *basicAPIRpcClient) toUpper(c rune) rune {
	var req = _Irpc_basicAPItoUpperReq{
		Param0_c: c,
	}
	var resp _Irpc_basicAPItoUpperResp
	if err := _c.endpoint.CallRemoteFunc("basicAPIRpcService", "toUpper", req, &resp); err != nil {
		panic(err)
	}
	return resp.Param0_
}
func (_c *basicAPIRpcClient) toUpperString(s string) string {
	var req = _Irpc_basicAPItoUpperStringReq{
		Param0_s: s,
	}
	var resp _Irpc_basicAPItoUpperStringResp
	if err := _c.endpoint.CallRemoteFunc("basicAPIRpcService", "toUpperString", req, &resp); err != nil {
		panic(err)
	}
	return resp.Param0_
}
func (_c *basicAPIRpcClient) negBool(ok bool) bool {
	var req = _Irpc_basicAPInegBoolReq{
		Param0_ok: ok,
	}
	var resp _Irpc_basicAPInegBoolResp
	if err := _c.endpoint.CallRemoteFunc("basicAPIRpcService", "negBool", req, &resp); err != nil {
		panic(err)
	}
	return resp.Param0_
}

type emptyAPIRpcClient struct {
	endpoint *irpc.Endpoint
}

func newEmptyAPIRpcClient(endpoint *irpc.Endpoint) *emptyAPIRpcClient {
	return &emptyAPIRpcClient{endpoint: endpoint}
}

type _Irpc_basicAPIaddByteReq struct {
	Param0_a byte
	Param1_b byte
}

func (s _Irpc_basicAPIaddByteReq) Serialize(w io.Writer) error {
	{ // byte
		b := make([]byte, 1)
		b[0] = byte(s.Param0_a)
		if _, err := w.Write(b[:1]); err != nil {
			return fmt.Errorf("s.Param0_a uint8 write: %w", err)
		}
	}
	{ // byte
		b := make([]byte, 1)
		b[0] = byte(s.Param1_b)
		if _, err := w.Write(b[:1]); err != nil {
			return fmt.Errorf("s.Param1_b uint8 write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPIaddByteReq) Deserialize(r io.Reader) error {
	{ // byte
		b := make([]byte, 1)
		if _, err := io.ReadFull(r, b[:1]); err != nil {
			return fmt.Errorf("s.Param0_a uint8 decode: %w", err)
		}
		s.Param0_a = uint8(b[0])
	}
	{ // byte
		b := make([]byte, 1)
		if _, err := io.ReadFull(r, b[:1]); err != nil {
			return fmt.Errorf("s.Param1_b uint8 decode: %w", err)
		}
		s.Param1_b = uint8(b[0])
	}
	return nil
}

type _Irpc_basicAPIaddByteResp struct {
	Param0_ byte
}

func (s _Irpc_basicAPIaddByteResp) Serialize(w io.Writer) error {
	{ // byte
		b := make([]byte, 1)
		b[0] = byte(s.Param0_)
		if _, err := w.Write(b[:1]); err != nil {
			return fmt.Errorf("s.Param0_ uint8 write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPIaddByteResp) Deserialize(r io.Reader) error {
	{ // byte
		b := make([]byte, 1)
		if _, err := io.ReadFull(r, b[:1]); err != nil {
			return fmt.Errorf("s.Param0_ uint8 decode: %w", err)
		}
		s.Param0_ = uint8(b[0])
	}
	return nil
}

type _Irpc_basicAPIaddIntReq struct {
	Param0_a int
	Param1_b int
}

func (s _Irpc_basicAPIaddIntReq) Serialize(w io.Writer) error {
	{ // int
		b := make([]byte, 8)
		binary.LittleEndian.PutUint64(b, uint64(s.Param0_a))
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("s.Param0_a int write: %w", err)
		}
	}
	{ // int
		b := make([]byte, 8)
		binary.LittleEndian.PutUint64(b, uint64(s.Param1_b))
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("s.Param1_b int write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPIaddIntReq) Deserialize(r io.Reader) error {
	{ // int
		b := make([]byte, 8)
		if _, err := io.ReadFull(r, b[:8]); err != nil {
			return fmt.Errorf("s.Param0_a int decode: %w", err)
		}
		s.Param0_a = int(binary.LittleEndian.Uint64(b))
	}
	{ // int
		b := make([]byte, 8)
		if _, err := io.ReadFull(r, b[:8]); err != nil {
			return fmt.Errorf("s.Param1_b int decode: %w", err)
		}
		s.Param1_b = int(binary.LittleEndian.Uint64(b))
	}
	return nil
}

type _Irpc_basicAPIaddIntResp struct {
	Param0_ int
}

func (s _Irpc_basicAPIaddIntResp) Serialize(w io.Writer) error {
	{ // int
		b := make([]byte, 8)
		binary.LittleEndian.PutUint64(b, uint64(s.Param0_))
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("s.Param0_ int write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPIaddIntResp) Deserialize(r io.Reader) error {
	{ // int
		b := make([]byte, 8)
		if _, err := io.ReadFull(r, b[:8]); err != nil {
			return fmt.Errorf("s.Param0_ int decode: %w", err)
		}
		s.Param0_ = int(binary.LittleEndian.Uint64(b))
	}
	return nil
}

type _Irpc_basicAPIswapIntReq struct {
	Param0_a int
	Param1_b int
}

func (s _Irpc_basicAPIswapIntReq) Serialize(w io.Writer) error {
	{ // int
		b := make([]byte, 8)
		binary.LittleEndian.PutUint64(b, uint64(s.Param0_a))
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("s.Param0_a int write: %w", err)
		}
	}
	{ // int
		b := make([]byte, 8)
		binary.LittleEndian.PutUint64(b, uint64(s.Param1_b))
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("s.Param1_b int write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPIswapIntReq) Deserialize(r io.Reader) error {
	{ // int
		b := make([]byte, 8)
		if _, err := io.ReadFull(r, b[:8]); err != nil {
			return fmt.Errorf("s.Param0_a int decode: %w", err)
		}
		s.Param0_a = int(binary.LittleEndian.Uint64(b))
	}
	{ // int
		b := make([]byte, 8)
		if _, err := io.ReadFull(r, b[:8]); err != nil {
			return fmt.Errorf("s.Param1_b int decode: %w", err)
		}
		s.Param1_b = int(binary.LittleEndian.Uint64(b))
	}
	return nil
}

type _Irpc_basicAPIswapIntResp struct {
	Param0_ int
	Param1_ int
}

func (s _Irpc_basicAPIswapIntResp) Serialize(w io.Writer) error {
	{ // int
		b := make([]byte, 8)
		binary.LittleEndian.PutUint64(b, uint64(s.Param0_))
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("s.Param0_ int write: %w", err)
		}
	}
	{ // int
		b := make([]byte, 8)
		binary.LittleEndian.PutUint64(b, uint64(s.Param1_))
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("s.Param1_ int write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPIswapIntResp) Deserialize(r io.Reader) error {
	{ // int
		b := make([]byte, 8)
		if _, err := io.ReadFull(r, b[:8]); err != nil {
			return fmt.Errorf("s.Param0_ int decode: %w", err)
		}
		s.Param0_ = int(binary.LittleEndian.Uint64(b))
	}
	{ // int
		b := make([]byte, 8)
		if _, err := io.ReadFull(r, b[:8]); err != nil {
			return fmt.Errorf("s.Param1_ int decode: %w", err)
		}
		s.Param1_ = int(binary.LittleEndian.Uint64(b))
	}
	return nil
}

type _Irpc_basicAPIsubUintReq struct {
	Param0_a uint
	Param0_b uint
}

func (s _Irpc_basicAPIsubUintReq) Serialize(w io.Writer) error {
	{ // uint
		b := make([]byte, 8)
		binary.LittleEndian.PutUint64(b, uint64(s.Param0_a))
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("s.Param0_a uint write: %w", err)
		}
	}
	{ // uint
		b := make([]byte, 8)
		binary.LittleEndian.PutUint64(b, uint64(s.Param0_b))
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("s.Param0_b uint write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPIsubUintReq) Deserialize(r io.Reader) error {
	{ // uint
		b := make([]byte, 8)
		if _, err := io.ReadFull(r, b[:8]); err != nil {
			return fmt.Errorf("s.Param0_a uint decode: %w", err)
		}
		s.Param0_a = uint(binary.LittleEndian.Uint64(b))
	}
	{ // uint
		b := make([]byte, 8)
		if _, err := io.ReadFull(r, b[:8]); err != nil {
			return fmt.Errorf("s.Param0_b uint decode: %w", err)
		}
		s.Param0_b = uint(binary.LittleEndian.Uint64(b))
	}
	return nil
}

type _Irpc_basicAPIsubUintResp struct {
	Param0_ uint
}

func (s _Irpc_basicAPIsubUintResp) Serialize(w io.Writer) error {
	{ // uint
		b := make([]byte, 8)
		binary.LittleEndian.PutUint64(b, uint64(s.Param0_))
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("s.Param0_ uint write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPIsubUintResp) Deserialize(r io.Reader) error {
	{ // uint
		b := make([]byte, 8)
		if _, err := io.ReadFull(r, b[:8]); err != nil {
			return fmt.Errorf("s.Param0_ uint decode: %w", err)
		}
		s.Param0_ = uint(binary.LittleEndian.Uint64(b))
	}
	return nil
}

type _Irpc_basicAPIaddInt8Req struct {
	Param0_a int8
	Param0_b int8
}

func (s _Irpc_basicAPIaddInt8Req) Serialize(w io.Writer) error {
	{ // int8
		b := make([]byte, 1)
		b[0] = byte(s.Param0_a)
		if _, err := w.Write(b[:1]); err != nil {
			return fmt.Errorf("s.Param0_a int8 write: %w", err)
		}
	}
	{ // int8
		b := make([]byte, 1)
		b[0] = byte(s.Param0_b)
		if _, err := w.Write(b[:1]); err != nil {
			return fmt.Errorf("s.Param0_b int8 write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPIaddInt8Req) Deserialize(r io.Reader) error {
	{ // int8
		b := make([]byte, 1)
		if _, err := io.ReadFull(r, b[:1]); err != nil {
			return fmt.Errorf("s.Param0_a int8 decode: %w", err)
		}
		s.Param0_a = int8(b[0])
	}
	{ // int8
		b := make([]byte, 1)
		if _, err := io.ReadFull(r, b[:1]); err != nil {
			return fmt.Errorf("s.Param0_b int8 decode: %w", err)
		}
		s.Param0_b = int8(b[0])
	}
	return nil
}

type _Irpc_basicAPIaddInt8Resp struct {
	Param0_ int8
}

func (s _Irpc_basicAPIaddInt8Resp) Serialize(w io.Writer) error {
	{ // int8
		b := make([]byte, 1)
		b[0] = byte(s.Param0_)
		if _, err := w.Write(b[:1]); err != nil {
			return fmt.Errorf("s.Param0_ int8 write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPIaddInt8Resp) Deserialize(r io.Reader) error {
	{ // int8
		b := make([]byte, 1)
		if _, err := io.ReadFull(r, b[:1]); err != nil {
			return fmt.Errorf("s.Param0_ int8 decode: %w", err)
		}
		s.Param0_ = int8(b[0])
	}
	return nil
}

type _Irpc_basicAPIaddUint8Req struct {
	Param0_a uint8
	Param0_b uint8
}

func (s _Irpc_basicAPIaddUint8Req) Serialize(w io.Writer) error {
	{ // uint8
		b := make([]byte, 1)
		b[0] = byte(s.Param0_a)
		if _, err := w.Write(b[:1]); err != nil {
			return fmt.Errorf("s.Param0_a uint8 write: %w", err)
		}
	}
	{ // uint8
		b := make([]byte, 1)
		b[0] = byte(s.Param0_b)
		if _, err := w.Write(b[:1]); err != nil {
			return fmt.Errorf("s.Param0_b uint8 write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPIaddUint8Req) Deserialize(r io.Reader) error {
	{ // uint8
		b := make([]byte, 1)
		if _, err := io.ReadFull(r, b[:1]); err != nil {
			return fmt.Errorf("s.Param0_a uint8 decode: %w", err)
		}
		s.Param0_a = uint8(b[0])
	}
	{ // uint8
		b := make([]byte, 1)
		if _, err := io.ReadFull(r, b[:1]); err != nil {
			return fmt.Errorf("s.Param0_b uint8 decode: %w", err)
		}
		s.Param0_b = uint8(b[0])
	}
	return nil
}

type _Irpc_basicAPIaddUint8Resp struct {
	Param0_ uint8
}

func (s _Irpc_basicAPIaddUint8Resp) Serialize(w io.Writer) error {
	{ // uint8
		b := make([]byte, 1)
		b[0] = byte(s.Param0_)
		if _, err := w.Write(b[:1]); err != nil {
			return fmt.Errorf("s.Param0_ uint8 write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPIaddUint8Resp) Deserialize(r io.Reader) error {
	{ // uint8
		b := make([]byte, 1)
		if _, err := io.ReadFull(r, b[:1]); err != nil {
			return fmt.Errorf("s.Param0_ uint8 decode: %w", err)
		}
		s.Param0_ = uint8(b[0])
	}
	return nil
}

type _Irpc_basicAPIaddInt16Req struct {
	Param0_a int16
	Param0_b int16
}

func (s _Irpc_basicAPIaddInt16Req) Serialize(w io.Writer) error {
	{ // int16
		b := make([]byte, 2)
		binary.LittleEndian.PutUint16(b, uint16(s.Param0_a))
		if _, err := w.Write(b[:2]); err != nil {
			return fmt.Errorf("s.Param0_a int16 write: %w", err)
		}
	}
	{ // int16
		b := make([]byte, 2)
		binary.LittleEndian.PutUint16(b, uint16(s.Param0_b))
		if _, err := w.Write(b[:2]); err != nil {
			return fmt.Errorf("s.Param0_b int16 write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPIaddInt16Req) Deserialize(r io.Reader) error {
	{ // int16
		b := make([]byte, 2)
		if _, err := io.ReadFull(r, b[:2]); err != nil {
			return fmt.Errorf("s.Param0_a int16 decode: %w", err)
		}
		s.Param0_a = int16(binary.LittleEndian.Uint16(b))
	}
	{ // int16
		b := make([]byte, 2)
		if _, err := io.ReadFull(r, b[:2]); err != nil {
			return fmt.Errorf("s.Param0_b int16 decode: %w", err)
		}
		s.Param0_b = int16(binary.LittleEndian.Uint16(b))
	}
	return nil
}

type _Irpc_basicAPIaddInt16Resp struct {
	Param0_ int16
}

func (s _Irpc_basicAPIaddInt16Resp) Serialize(w io.Writer) error {
	{ // int16
		b := make([]byte, 2)
		binary.LittleEndian.PutUint16(b, uint16(s.Param0_))
		if _, err := w.Write(b[:2]); err != nil {
			return fmt.Errorf("s.Param0_ int16 write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPIaddInt16Resp) Deserialize(r io.Reader) error {
	{ // int16
		b := make([]byte, 2)
		if _, err := io.ReadFull(r, b[:2]); err != nil {
			return fmt.Errorf("s.Param0_ int16 decode: %w", err)
		}
		s.Param0_ = int16(binary.LittleEndian.Uint16(b))
	}
	return nil
}

type _Irpc_basicAPIaddUint16Req struct {
	Param0_a uint16
	Param0_b uint16
}

func (s _Irpc_basicAPIaddUint16Req) Serialize(w io.Writer) error {
	{ // uint16
		b := make([]byte, 2)
		binary.LittleEndian.PutUint16(b, s.Param0_a)
		if _, err := w.Write(b[:2]); err != nil {
			return fmt.Errorf("s.Param0_a uint16 write: %w", err)
		}
	}
	{ // uint16
		b := make([]byte, 2)
		binary.LittleEndian.PutUint16(b, s.Param0_b)
		if _, err := w.Write(b[:2]); err != nil {
			return fmt.Errorf("s.Param0_b uint16 write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPIaddUint16Req) Deserialize(r io.Reader) error {
	{ // uint16
		b := make([]byte, 2)
		if _, err := io.ReadFull(r, b[:2]); err != nil {
			return fmt.Errorf("s.Param0_a uint16 decode: %w", err)
		}
		s.Param0_a = binary.LittleEndian.Uint16(b)
	}
	{ // uint16
		b := make([]byte, 2)
		if _, err := io.ReadFull(r, b[:2]); err != nil {
			return fmt.Errorf("s.Param0_b uint16 decode: %w", err)
		}
		s.Param0_b = binary.LittleEndian.Uint16(b)
	}
	return nil
}

type _Irpc_basicAPIaddUint16Resp struct {
	Param0_ uint16
}

func (s _Irpc_basicAPIaddUint16Resp) Serialize(w io.Writer) error {
	{ // uint16
		b := make([]byte, 2)
		binary.LittleEndian.PutUint16(b, s.Param0_)
		if _, err := w.Write(b[:2]); err != nil {
			return fmt.Errorf("s.Param0_ uint16 write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPIaddUint16Resp) Deserialize(r io.Reader) error {
	{ // uint16
		b := make([]byte, 2)
		if _, err := io.ReadFull(r, b[:2]); err != nil {
			return fmt.Errorf("s.Param0_ uint16 decode: %w", err)
		}
		s.Param0_ = binary.LittleEndian.Uint16(b)
	}
	return nil
}

type _Irpc_basicAPIaddInt32Req struct {
	Param0_a int32
	Param0_b int32
}

func (s _Irpc_basicAPIaddInt32Req) Serialize(w io.Writer) error {
	{ // int32
		b := make([]byte, 4)
		binary.LittleEndian.PutUint32(b, uint32(s.Param0_a))
		if _, err := w.Write(b[:4]); err != nil {
			return fmt.Errorf("s.Param0_a int32 write: %w", err)
		}
	}
	{ // int32
		b := make([]byte, 4)
		binary.LittleEndian.PutUint32(b, uint32(s.Param0_b))
		if _, err := w.Write(b[:4]); err != nil {
			return fmt.Errorf("s.Param0_b int32 write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPIaddInt32Req) Deserialize(r io.Reader) error {
	{ // int32
		b := make([]byte, 4)
		if _, err := io.ReadFull(r, b[:4]); err != nil {
			return fmt.Errorf("s.Param0_a int32 decode: %w", err)
		}
		s.Param0_a = int32(binary.LittleEndian.Uint32(b))
	}
	{ // int32
		b := make([]byte, 4)
		if _, err := io.ReadFull(r, b[:4]); err != nil {
			return fmt.Errorf("s.Param0_b int32 decode: %w", err)
		}
		s.Param0_b = int32(binary.LittleEndian.Uint32(b))
	}
	return nil
}

type _Irpc_basicAPIaddInt32Resp struct {
	Param0_ int32
}

func (s _Irpc_basicAPIaddInt32Resp) Serialize(w io.Writer) error {
	{ // int32
		b := make([]byte, 4)
		binary.LittleEndian.PutUint32(b, uint32(s.Param0_))
		if _, err := w.Write(b[:4]); err != nil {
			return fmt.Errorf("s.Param0_ int32 write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPIaddInt32Resp) Deserialize(r io.Reader) error {
	{ // int32
		b := make([]byte, 4)
		if _, err := io.ReadFull(r, b[:4]); err != nil {
			return fmt.Errorf("s.Param0_ int32 decode: %w", err)
		}
		s.Param0_ = int32(binary.LittleEndian.Uint32(b))
	}
	return nil
}

type _Irpc_basicAPIaddUint32Req struct {
	Param0_a uint32
	Param0_b uint32
}

func (s _Irpc_basicAPIaddUint32Req) Serialize(w io.Writer) error {
	{ // uint32
		b := make([]byte, 4)
		binary.LittleEndian.PutUint32(b, s.Param0_a)
		if _, err := w.Write(b[:4]); err != nil {
			return fmt.Errorf("s.Param0_a uint32 write: %w", err)
		}
	}
	{ // uint32
		b := make([]byte, 4)
		binary.LittleEndian.PutUint32(b, s.Param0_b)
		if _, err := w.Write(b[:4]); err != nil {
			return fmt.Errorf("s.Param0_b uint32 write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPIaddUint32Req) Deserialize(r io.Reader) error {
	{ // uint32
		b := make([]byte, 4)
		if _, err := io.ReadFull(r, b[:4]); err != nil {
			return fmt.Errorf("s.Param0_a uint32 decode: %w", err)
		}
		s.Param0_a = binary.LittleEndian.Uint32(b)
	}
	{ // uint32
		b := make([]byte, 4)
		if _, err := io.ReadFull(r, b[:4]); err != nil {
			return fmt.Errorf("s.Param0_b uint32 decode: %w", err)
		}
		s.Param0_b = binary.LittleEndian.Uint32(b)
	}
	return nil
}

type _Irpc_basicAPIaddUint32Resp struct {
	Param0_ uint32
}

func (s _Irpc_basicAPIaddUint32Resp) Serialize(w io.Writer) error {
	{ // uint32
		b := make([]byte, 4)
		binary.LittleEndian.PutUint32(b, s.Param0_)
		if _, err := w.Write(b[:4]); err != nil {
			return fmt.Errorf("s.Param0_ uint32 write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPIaddUint32Resp) Deserialize(r io.Reader) error {
	{ // uint32
		b := make([]byte, 4)
		if _, err := io.ReadFull(r, b[:4]); err != nil {
			return fmt.Errorf("s.Param0_ uint32 decode: %w", err)
		}
		s.Param0_ = binary.LittleEndian.Uint32(b)
	}
	return nil
}

type _Irpc_basicAPIaddInt64Req struct {
	Param0_a int64
	Param0_b int64
}

func (s _Irpc_basicAPIaddInt64Req) Serialize(w io.Writer) error {
	{ // int64
		b := make([]byte, 8)
		binary.LittleEndian.PutUint64(b, uint64(s.Param0_a))
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("s.Param0_a int64 write: %w", err)
		}
	}
	{ // int64
		b := make([]byte, 8)
		binary.LittleEndian.PutUint64(b, uint64(s.Param0_b))
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("s.Param0_b int64 write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPIaddInt64Req) Deserialize(r io.Reader) error {
	{ // int64
		b := make([]byte, 8)
		if _, err := io.ReadFull(r, b[:8]); err != nil {
			return fmt.Errorf("s.Param0_a int64 decode: %w", err)
		}
		s.Param0_a = int64(binary.LittleEndian.Uint64(b))
	}
	{ // int64
		b := make([]byte, 8)
		if _, err := io.ReadFull(r, b[:8]); err != nil {
			return fmt.Errorf("s.Param0_b int64 decode: %w", err)
		}
		s.Param0_b = int64(binary.LittleEndian.Uint64(b))
	}
	return nil
}

type _Irpc_basicAPIaddInt64Resp struct {
	Param0_ int64
}

func (s _Irpc_basicAPIaddInt64Resp) Serialize(w io.Writer) error {
	{ // int64
		b := make([]byte, 8)
		binary.LittleEndian.PutUint64(b, uint64(s.Param0_))
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("s.Param0_ int64 write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPIaddInt64Resp) Deserialize(r io.Reader) error {
	{ // int64
		b := make([]byte, 8)
		if _, err := io.ReadFull(r, b[:8]); err != nil {
			return fmt.Errorf("s.Param0_ int64 decode: %w", err)
		}
		s.Param0_ = int64(binary.LittleEndian.Uint64(b))
	}
	return nil
}

type _Irpc_basicAPIaddUint64Req struct {
	Param0_a uint64
	Param0_b uint64
}

func (s _Irpc_basicAPIaddUint64Req) Serialize(w io.Writer) error {
	{ // uint64
		b := make([]byte, 8)
		binary.LittleEndian.PutUint64(b, s.Param0_a)
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("s.Param0_a uint64 write: %w", err)
		}
	}
	{ // uint64
		b := make([]byte, 8)
		binary.LittleEndian.PutUint64(b, s.Param0_b)
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("s.Param0_b uint64 write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPIaddUint64Req) Deserialize(r io.Reader) error {
	{ // uint64
		b := make([]byte, 8)
		if _, err := io.ReadFull(r, b[:8]); err != nil {
			return fmt.Errorf("s.Param0_a uint64 decode: %w", err)
		}
		s.Param0_a = binary.LittleEndian.Uint64(b)
	}
	{ // uint64
		b := make([]byte, 8)
		if _, err := io.ReadFull(r, b[:8]); err != nil {
			return fmt.Errorf("s.Param0_b uint64 decode: %w", err)
		}
		s.Param0_b = binary.LittleEndian.Uint64(b)
	}
	return nil
}

type _Irpc_basicAPIaddUint64Resp struct {
	Param0_ uint64
}

func (s _Irpc_basicAPIaddUint64Resp) Serialize(w io.Writer) error {
	{ // uint64
		b := make([]byte, 8)
		binary.LittleEndian.PutUint64(b, s.Param0_)
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("s.Param0_ uint64 write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPIaddUint64Resp) Deserialize(r io.Reader) error {
	{ // uint64
		b := make([]byte, 8)
		if _, err := io.ReadFull(r, b[:8]); err != nil {
			return fmt.Errorf("s.Param0_ uint64 decode: %w", err)
		}
		s.Param0_ = binary.LittleEndian.Uint64(b)
	}
	return nil
}

type _Irpc_basicAPIaddFloat64Req struct {
	Param0_a float64
	Param0_b float64
}

func (s _Irpc_basicAPIaddFloat64Req) Serialize(w io.Writer) error {
	{ // float64
		b := make([]byte, 8)
		binary.LittleEndian.PutUint64(b, math.Float64bits(s.Param0_a))
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("s.Param0_a float64 write: %w", err)
		}
	}
	{ // float64
		b := make([]byte, 8)
		binary.LittleEndian.PutUint64(b, math.Float64bits(s.Param0_b))
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("s.Param0_b float64 write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPIaddFloat64Req) Deserialize(r io.Reader) error {
	{ // float64
		b := make([]byte, 8)
		if _, err := io.ReadFull(r, b[:8]); err != nil {
			return fmt.Errorf("s.Param0_a float64 decode: %w", err)
		}
		s.Param0_a = math.Float64frombits(binary.LittleEndian.Uint64(b))
	}
	{ // float64
		b := make([]byte, 8)
		if _, err := io.ReadFull(r, b[:8]); err != nil {
			return fmt.Errorf("s.Param0_b float64 decode: %w", err)
		}
		s.Param0_b = math.Float64frombits(binary.LittleEndian.Uint64(b))
	}
	return nil
}

type _Irpc_basicAPIaddFloat64Resp struct {
	Param0_ float64
}

func (s _Irpc_basicAPIaddFloat64Resp) Serialize(w io.Writer) error {
	{ // float64
		b := make([]byte, 8)
		binary.LittleEndian.PutUint64(b, math.Float64bits(s.Param0_))
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("s.Param0_ float64 write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPIaddFloat64Resp) Deserialize(r io.Reader) error {
	{ // float64
		b := make([]byte, 8)
		if _, err := io.ReadFull(r, b[:8]); err != nil {
			return fmt.Errorf("s.Param0_ float64 decode: %w", err)
		}
		s.Param0_ = math.Float64frombits(binary.LittleEndian.Uint64(b))
	}
	return nil
}

type _Irpc_basicAPIaddFloat32Req struct {
	Param0_a float32
	Param0_b float32
}

func (s _Irpc_basicAPIaddFloat32Req) Serialize(w io.Writer) error {
	{ // float32
		b := make([]byte, 4)
		binary.LittleEndian.PutUint32(b, math.Float32bits(s.Param0_a))
		if _, err := w.Write(b[:4]); err != nil {
			return fmt.Errorf("s.Param0_a float32 write: %w", err)
		}
	}
	{ // float32
		b := make([]byte, 4)
		binary.LittleEndian.PutUint32(b, math.Float32bits(s.Param0_b))
		if _, err := w.Write(b[:4]); err != nil {
			return fmt.Errorf("s.Param0_b float32 write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPIaddFloat32Req) Deserialize(r io.Reader) error {
	{ // float32
		b := make([]byte, 4)
		if _, err := io.ReadFull(r, b[:4]); err != nil {
			return fmt.Errorf("s.Param0_a float32 decode: %w", err)
		}
		s.Param0_a = math.Float32frombits(binary.LittleEndian.Uint32(b))
	}
	{ // float32
		b := make([]byte, 4)
		if _, err := io.ReadFull(r, b[:4]); err != nil {
			return fmt.Errorf("s.Param0_b float32 decode: %w", err)
		}
		s.Param0_b = math.Float32frombits(binary.LittleEndian.Uint32(b))
	}
	return nil
}

type _Irpc_basicAPIaddFloat32Resp struct {
	Param0_ float32
}

func (s _Irpc_basicAPIaddFloat32Resp) Serialize(w io.Writer) error {
	{ // float32
		b := make([]byte, 4)
		binary.LittleEndian.PutUint32(b, math.Float32bits(s.Param0_))
		if _, err := w.Write(b[:4]); err != nil {
			return fmt.Errorf("s.Param0_ float32 write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPIaddFloat32Resp) Deserialize(r io.Reader) error {
	{ // float32
		b := make([]byte, 4)
		if _, err := io.ReadFull(r, b[:4]); err != nil {
			return fmt.Errorf("s.Param0_ float32 decode: %w", err)
		}
		s.Param0_ = math.Float32frombits(binary.LittleEndian.Uint32(b))
	}
	return nil
}

type _Irpc_basicAPItoUpperReq struct {
	Param0_c rune
}

func (s _Irpc_basicAPItoUpperReq) Serialize(w io.Writer) error {
	{ // rune
		b := make([]byte, 4)
		binary.LittleEndian.PutUint32(b, uint32(s.Param0_c))
		if _, err := w.Write(b[:4]); err != nil {
			return fmt.Errorf("s.Param0_c int32 write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPItoUpperReq) Deserialize(r io.Reader) error {
	{ // rune
		b := make([]byte, 4)
		if _, err := io.ReadFull(r, b[:4]); err != nil {
			return fmt.Errorf("s.Param0_c int32 decode: %w", err)
		}
		s.Param0_c = int32(binary.LittleEndian.Uint32(b))
	}
	return nil
}

type _Irpc_basicAPItoUpperResp struct {
	Param0_ rune
}

func (s _Irpc_basicAPItoUpperResp) Serialize(w io.Writer) error {
	{ // rune
		b := make([]byte, 4)
		binary.LittleEndian.PutUint32(b, uint32(s.Param0_))
		if _, err := w.Write(b[:4]); err != nil {
			return fmt.Errorf("s.Param0_ int32 write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPItoUpperResp) Deserialize(r io.Reader) error {
	{ // rune
		b := make([]byte, 4)
		if _, err := io.ReadFull(r, b[:4]); err != nil {
			return fmt.Errorf("s.Param0_ int32 decode: %w", err)
		}
		s.Param0_ = int32(binary.LittleEndian.Uint32(b))
	}
	return nil
}

type _Irpc_basicAPItoUpperStringReq struct {
	Param0_s string
}

func (s _Irpc_basicAPItoUpperStringReq) Serialize(w io.Writer) error {
	{ // string
		var l int = len(s.Param0_s)
		b := make([]byte, 8)
		binary.LittleEndian.PutUint64(b, uint64(l))
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("l int write: %w", err)
		}

		_, err := w.Write([]byte(s.Param0_s))
		if err != nil {
			return fmt.Errorf("failed to write string to writer: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPItoUpperStringReq) Deserialize(r io.Reader) error {
	{ // string
		{
			var l int
			b := make([]byte, 8)
			if _, err := io.ReadFull(r, b[:8]); err != nil {
				return fmt.Errorf("l int decode: %w", err)
			}
			l = int(binary.LittleEndian.Uint64(b))
			sbuf := make([]byte, l)
			_, err := io.ReadFull(r, sbuf)
			if err != nil {
				return fmt.Errorf("failed to read string data from reader: %w", err)
			}
			s.Param0_s = string(sbuf)
		}
	}
	return nil
}

type _Irpc_basicAPItoUpperStringResp struct {
	Param0_ string
}

func (s _Irpc_basicAPItoUpperStringResp) Serialize(w io.Writer) error {
	{ // string
		var l int = len(s.Param0_)
		b := make([]byte, 8)
		binary.LittleEndian.PutUint64(b, uint64(l))
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("l int write: %w", err)
		}

		_, err := w.Write([]byte(s.Param0_))
		if err != nil {
			return fmt.Errorf("failed to write string to writer: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPItoUpperStringResp) Deserialize(r io.Reader) error {
	{ // string
		{
			var l int
			b := make([]byte, 8)
			if _, err := io.ReadFull(r, b[:8]); err != nil {
				return fmt.Errorf("l int decode: %w", err)
			}
			l = int(binary.LittleEndian.Uint64(b))
			sbuf := make([]byte, l)
			_, err := io.ReadFull(r, sbuf)
			if err != nil {
				return fmt.Errorf("failed to read string data from reader: %w", err)
			}
			s.Param0_ = string(sbuf)
		}
	}
	return nil
}

type _Irpc_basicAPInegBoolReq struct {
	Param0_ok bool
}

func (s _Irpc_basicAPInegBoolReq) Serialize(w io.Writer) error {
	{ // bool
		b := make([]byte, 1)
		if s.Param0_ok {
			b[0] = 1
		} else {
			b[0] = 0
		}
		if _, err := w.Write(b[:1]); err != nil {
			return fmt.Errorf("s.Param0_ok bool write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPInegBoolReq) Deserialize(r io.Reader) error {
	{ // bool
		b := make([]byte, 1)
		if _, err := io.ReadFull(r, b[:1]); err != nil {
			return fmt.Errorf("s.Param0_ok bool decode: %w", err)
		}
		if b[0] == 0 {
			s.Param0_ok = false
		} else {
			s.Param0_ok = true
		}
	}
	return nil
}

type _Irpc_basicAPInegBoolResp struct {
	Param0_ bool
}

func (s _Irpc_basicAPInegBoolResp) Serialize(w io.Writer) error {
	{ // bool
		b := make([]byte, 1)
		if s.Param0_ {
			b[0] = 1
		} else {
			b[0] = 0
		}
		if _, err := w.Write(b[:1]); err != nil {
			return fmt.Errorf("s.Param0_ bool write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_basicAPInegBoolResp) Deserialize(r io.Reader) error {
	{ // bool
		b := make([]byte, 1)
		if _, err := io.ReadFull(r, b[:1]); err != nil {
			return fmt.Errorf("s.Param0_ bool decode: %w", err)
		}
		if b[0] == 0 {
			s.Param0_ = false
		} else {
			s.Param0_ = true
		}
	}
	return nil
}
