// Code generated by irpc generator; DO NOT EDIT
package irpctestpkg

import (
	"encoding/binary"
	"fmt"
	"github.com/marben/irpc/pkg/irpc"
	"io"
	"math"
)

type tcpTestApiRpcService struct {
	impl tcpTestApi
}

func newTcpTestApiRpcService(impl tcpTestApi) *tcpTestApiRpcService {
	return &tcpTestApiRpcService{impl: impl}
}
func (tcpTestApiRpcService) Hash() []byte {
	return []byte("tcpTestApiRpcService")
}
func (s *tcpTestApiRpcService) GetFuncCall(funcId irpc.FuncId) (irpc.ArgDeserializer, error) {
	switch funcId {
	case 0: // Div
		return func(d *irpc.Decoder) (irpc.FuncExecutor, error) {
			// DESERIALIZE
			var args _Irpc_tcpTestApiDivReq
			if err := args.Deserialize(d); err != nil {
				return nil, err
			}
			return func() irpc.Serializable {
				// EXECUTE
				var resp _Irpc_tcpTestApiDivResp
				resp.Param0_, resp.Param1_ = s.impl.Div(args.Param0_a, args.Param0_b)
				return resp
			}, nil
		}, nil
	default:
		return nil, fmt.Errorf("function '%d' doesn't exist on service '%s'", funcId, string(s.Hash()))
	}
}

type tcpTestApiRpcClient struct {
	endpoint *irpc.Endpoint
	id       irpc.RegisteredServiceId
}

func newTcpTestApiRpcClient(endpoint *irpc.Endpoint) (*tcpTestApiRpcClient, error) {
	id, err := endpoint.RegisterClient([]byte("tcpTestApiRpcService"))
	if err != nil {
		return nil, fmt.Errorf("register failed: %w", err)
	}
	return &tcpTestApiRpcClient{endpoint: endpoint, id: id}, nil
}
func (_c *tcpTestApiRpcClient) Div(a float64, b float64) (float64, error) {
	var req = _Irpc_tcpTestApiDivReq{
		Param0_a: a,
		Param0_b: b,
	}
	var resp _Irpc_tcpTestApiDivResp
	if err := _c.endpoint.CallRemoteFunc(_c.id, 0, req, &resp); err != nil {
		panic(err)
	}
	return resp.Param0_, resp.Param1_
}

type _Irpc_tcpTestApiDivReq struct {
	Param0_a float64
	Param0_b float64
}

func (s _Irpc_tcpTestApiDivReq) Serialize(w io.Writer) error {
	b := make([]byte, 8)
	{ // float64
		binary.LittleEndian.PutUint64(b, math.Float64bits(s.Param0_a))
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("s.Param0_a float64 write: %w", err)
		}
	}
	{ // float64
		binary.LittleEndian.PutUint64(b, math.Float64bits(s.Param0_b))
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("s.Param0_b float64 write: %w", err)
		}
	}
	return nil
}
func (s *_Irpc_tcpTestApiDivReq) Deserialize(d *irpc.Decoder) error {
	{ // float64
		if err := d.Float64(&s.Param0_a); err != nil {
			return fmt.Errorf("deserialize s.Param0_a of type 'float64': %w", err)
		}
	}
	{ // float64
		if err := d.Float64(&s.Param0_b); err != nil {
			return fmt.Errorf("deserialize s.Param0_b of type 'float64': %w", err)
		}
	}
	return nil
}

type _Irpc_tcpTestApiDivResp struct {
	Param0_ float64
	Param1_ error
}

func (s _Irpc_tcpTestApiDivResp) Serialize(w io.Writer) error {
	b := make([]byte, 8)
	{ // float64
		binary.LittleEndian.PutUint64(b, math.Float64bits(s.Param0_))
		if _, err := w.Write(b[:8]); err != nil {
			return fmt.Errorf("s.Param0_ float64 write: %w", err)
		}
	}
	{ // error
		var isNil bool
		if s.Param1_ == nil {
			isNil = true
		}
		if isNil {
			b[0] = 1
		} else {
			b[0] = 0
		}
		if _, err := w.Write(b[:1]); err != nil {
			return fmt.Errorf("isNil bool write: %w", err)
		}

		if !isNil {
			{ // Error()
				_Error_0_ := s.Param1_.Error()
				var l int = len(_Error_0_)
				binary.LittleEndian.PutUint64(b, uint64(l))
				if _, err := w.Write(b[:8]); err != nil {
					return fmt.Errorf("l int write: %w", err)
				}

				_, err := w.Write([]byte(_Error_0_))
				if err != nil {
					return fmt.Errorf("failed to write string to writer: %w", err)
				}
			}
		}
	}
	return nil
}
func (s *_Irpc_tcpTestApiDivResp) Deserialize(d *irpc.Decoder) error {
	{ // float64
		if err := d.Float64(&s.Param0_); err != nil {
			return fmt.Errorf("deserialize s.Param0_ of type 'float64': %w", err)
		}
	}
	{ // error
		var isNil bool
		if err := d.Bool(&isNil); err != nil {
			return fmt.Errorf("deserialize isNil of type 'bool': %w", err)
		}
		if isNil {
			s.Param1_ = nil
		} else {
			var impl _error_tcpTestApi_irpcInterfaceImpl
			{ // Error()
				{
					var l int
					if err := d.Int(&l); err != nil {
						return fmt.Errorf("deserialize l of type 'int': %w", err)
					}
					sbuf := make([]byte, l)
					_, err := io.ReadFull(d.R, sbuf)
					if err != nil {
						return fmt.Errorf("failed to read string data from reader: %w", err)
					}
					impl._Error_0_ = string(sbuf)
				}
			}
			s.Param1_ = impl
		}
	}
	return nil
}

type _error_tcpTestApi_irpcInterfaceImpl struct {
	_Error_0_ string
}

func (i _error_tcpTestApi_irpcInterfaceImpl) Error() string {
	return i._Error_0_
}
